<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[crazyzfk's blog]]></title>
  <link href="http://crazyzfk.github.io/atom.xml" rel="self"/>
  <link href="http://crazyzfk.github.io/"/>
  <updated>2020-08-09T12:21:46+08:00</updated>
  <id>http://crazyzfk.github.io/</id>
  <author>
    <name><![CDATA[zfk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Be a Senior Sowftware Enginner]]></title>
    <link href="http://crazyzfk.github.io/blog/2020/08/09/how-to-be-a-senior-sowftware-enginner/"/>
    <updated>2020-08-09T10:12:04+08:00</updated>
    <id>http://crazyzfk.github.io/blog/2020/08/09/how-to-be-a-senior-sowftware-enginner</id>
    <content type="html"><![CDATA[<blockquote><p>这个blog的时候我并不是一个senior的工程师，我在思考如何成为一个senior的工程师。</p></blockquote>

<p>距离上个blog已经过去几个月了，这些时间我自己对于未来的规划也是几经变动。一段时间为了下一代想这样做，另一段时间想着为了父母那样做。自己每天的时间也被这两种想法来回拉扯，一段时间下班后干这个，一段时间下班后做另一个。总之，这段时间和我以前浪费的时间一样没有给自己带来更多的增长。</p>

<p>一个星期以来我一直在反思自己这个左右摇摆的性格给自己带来的危害，想着如何突破这个隐形的枷锁。我将自己几个月以来的想法进行了抽象和总结，其中的共同之处总结到了一起，得到一个结论就是无论选择什么样的规划成为senior的工程师都是必须的。与其纠结选哪一个，不如先把事情做了。</p>

<h2>问题</h2>

<p>要成为一个senior的工程师，首先要做的是找到自己阻碍自己成长的问题。</p>

<h3>想的太多做的太少</h3>

<p>这个应该是我最大的问题了，毕业四年以来除了在公司里面学到的东西就再无其他了。自己也曾想过做很多的事情，但最后也是不了了之。</p>

<p>这里我列举下自己从大学到现在想做的事情：</p>

<ol>
<li>参加ACM比赛，最后败给了游戏</li>
<li>想做Linux系统开发，最后败给了游戏</li>
<li>想做Linux内核开发，败给了各种美剧</li>
<li>想把各种分布式存储的东西学习一遍，败给了懒惰</li>
</ol>


<p>回想一下过去感觉自己除了工作之外确实是一事无成，自己的懒惰和自控力是最大的原因。自己想了很多的事情，但是真正坚持做到最后的却是一个也没有。每个技术都是浅尝辄止，没有深入地了解过。</p>

<h3>英语太差</h3>

<p>这个没什么好说的了，作为一个developer英语的重要性毋庸置疑。几乎所有的有价值的技术文档都是英语的，中文环境里面的资料无论是质量还是数量都差太多了。自己在阅读这些英语资料磕磕绊绊，无法坚持下来。</p>

<h3>没有产品</h3>

<p>除了在公司的项目，我再也没有在其他的地方写过代码。自己的能力全要依赖公司里面的项目来证明，而这些项目我在其中的责任就是领任务，完成这些任务。这些项目从立项到需求再到任务，这些中间的阶段我都没有参与过，那么这些项目证明我能力的效果就大打折扣。没有自己的产品就意味着没有自己的品牌，无法有效证明自己有能力承担更加重要的任务。将自己的作品通过GitHub展示出来，让别人能实实在在地看到我的代码，我设计这个产品的思路。这些作品的说服力可要比简历上面的公司项目强的多，公司的项目只能口述，这个可以看得见摸的着。</p>

<h3>表达能力差</h3>

<p>作为一个developer我的表达能力和说服别人的能力太差了，工作以来对于上面交代的任务都是 “是，是，是” “好，好，好”， 很少表达自己的看法，即使自己有想法也无法提供充足的理由来说服别人。这个虽然不是一个技术人员必须的能力，但是如果要成为senior的工程师，这个能力也是必须的。</p>

<h2>怎么做</h2>

<p>怎么做是这个blog的最核心的内容，网络上有很多如何成为senior的文章和视频，大部分都很抽象，大道理很多具体怎么实施又要看每个人的理解。我打算根据自己在上面提出来的问题，先修正问题，先把上面的问题解决了，在考虑下个阶段怎么做。</p>

<p><strong>英语</strong>，这个应当是首先要解决的问题。从初中学习英语到现在十几年的时间也没学出个什么东西，应试教育的英语学习对于我的这个目的来说是完全不适用的。我就当自己没有任何英语的基础来学习英语，从背单词开始。很多人不建议背单词觉得太无聊，而且效率太低了。我不这么认为，单词应当是良好的基础，有了这个基础其他英语的学习就会事半功倍。背单词不是要求把大部头词典上的每个单词和每个单词的意思都记住，而是有选择的背。怎么选择哪，我建议直接背雅思词汇即可。单词背完后，学习基础的语法知识。当这两步完成后就可以开始大量阅读英语文章，文章中的单词和语法可以协助我们来复习和扩从原来的积累。英语文章的来源可以是下面几个：</p>

<ol>
<li>BBC News</li>
<li>经济学人的往期文章</li>
<li>你喜欢的英文技术博客。</li>
</ol>


<p>阅读这些内容已经不在是问题的时候，就可以尝试使用英语来写文章了。这些文章可以是你自己的博客，也可以是工作中使用的邮件。总之，就是能用英语写作的地方一律用英语。最后是听力的部分，这部分完全可以看youtube来解决，当能完全无障碍的理解了youtuber们都说了什么的时候就差不多了。至于说的部分就只能找途径和外国人练习了，可以考虑去菲律宾英语游学一个月来练习。</p>

<p><strong>个人作品</strong>，一个能用的作品需要前后端的内容，我目前只会后端技术。所以为了完成一个产品，我需要自己学习下前端的技术，为了方便和简单js和vue是我的首选。这些作品我会在后面的blog中一点一点地展示出来。详细记录自己设计流程，开发流程。</p>

<p><strong>BLOG</strong>，写blog可以帮助我解决表达能力和自制力差的问题。通过blog的每周总结来确定自己作品的进度，每周能提醒自己做到哪了。这些blog一旦发布出去，自己也不好意思半途而废。介绍自己的项目，确定技术选型的过程和对于功能的设计，记录这些能很好的锻炼自己在表达方面的能力。blog同时也能成为我的一个展示的窗口，通过一篇篇的blog我可以向外输出自己的价值。在blog中写下自己对某项技术的总结，尝试教会别人自己新学习的技术也能检验自己的掌握程度。</p>

<h2>写在最后的话</h2>

<p>今天之所以要单独写篇絮絮叨叨的bolog来总结自己这段时间的想法，主要是要把这些东西以一种形式记录下来。这些东西不应该只是想想就算了的，应当是有反馈有闭环的。这些东西一旦写下了，就完成了从想法到实际的转换，不再是可以任意改变的东西。所有上面的那些都是要一一实现的，不是可以随便放弃的。</p>

<p><strong>不要从明天开始，不要从下午13:00开始，要从现在、此刻开始。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Container With Most Water]]></title>
    <link href="http://crazyzfk.github.io/blog/2020/01/05/container-with-most-water/"/>
    <updated>2020-01-05T11:35:06+08:00</updated>
    <id>http://crazyzfk.github.io/blog/2020/01/05/container-with-most-water</id>
    <content type="html"><![CDATA[<h2>问题描述</h2>

<p>假设有n个非负的整数a1,a2,&hellip;an，在二维坐标系中分别代表(1,a1),(2,a2)&hellip;(n,an)。分别以这些点为起点向x轴作垂线，以这些垂线为一遍x轴为一边找到最大的面积。</p>

<blockquote><p>n 至少为2</p></blockquote>

<p>举例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Input: [1,8,6,2,5,4,8,3,7]
</span><span class='line'>Output: 49</span></code></pre></td></tr></table></div></figure>


<p>从数组的第2个数到最后一个数可以组成一个面积为7*7的矩型。</p>

<p>数组第2个数到第7个数组成的面积为8*6，小于49。</p>

<h2>问题分析</h2>

<p>比较简单的思路就是穷举，找到所有的组合的面积返回最大的即可，这样太挫了，不用这个思路了。</p>

<p><strong>以下是看了答案后的思考</strong></p>

<p>面积等于长乘以宽，尽可能的长和尽可能的宽能够获取到大的面积。长最大为n，宽最大为数组中的最大数。</p>

<p>首先有两个指针，分别指向第一个数和最后一个数，这个时候是最长的，但是面积不是最大的。长度的变化也是依赖数组中的数字大小，这个时候如何进行下一步是关键。根据尽可能长的标准，保留最长的一个边移动较短的一边的指针。计算出每次的面积，最后返回最大的面积。</p>

<p>代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">maxArea</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">height</span><span class="p">,</span> <span class="kt">int</span> <span class="n">heightSize</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">*</span><span class="n">first</span><span class="p">,</span><span class="o">*</span><span class="n">end</span><span class="p">,</span><span class="n">maxArea</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">realHeight</span><span class="p">,</span><span class="n">tmpArea</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">first</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">height</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">end</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">height</span><span class="p">[</span><span class="n">heightSize</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">first</span> <span class="o">&lt;=</span> <span class="n">end</span><span class="p">){</span>
</span><span class='line'>        <span class="n">realHeight</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">first</span><span class="p">)</span><span class="o">&gt;=</span><span class="p">(</span><span class="o">*</span><span class="n">end</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="o">*</span><span class="n">end</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="o">*</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'>        <span class="n">tmpArea</span> <span class="o">=</span> <span class="n">realHeight</span> <span class="o">*</span> <span class="p">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">first</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">tmpArea</span><span class="o">&gt;</span><span class="n">maxArea</span><span class="p">){</span>
</span><span class='line'>            <span class="n">maxArea</span> <span class="o">=</span> <span class="n">tmpArea</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">first</span><span class="o">&gt;=*</span><span class="n">end</span><span class="p">){</span>
</span><span class='line'>            <span class="n">end</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="n">first</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">maxArea</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Runtime</span><span class="p">:</span> <span class="mi">12</span> <span class="n">ms</span><span class="p">,</span> <span class="n">faster</span> <span class="n">than</span> <span class="mf">94.13</span><span class="o">%</span> <span class="n">of</span> <span class="n">C</span> <span class="n">online</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">Container</span> <span class="n">With</span> <span class="n">Most</span> <span class="n">Water</span><span class="p">.</span>
</span><span class='line'><span class="n">Memory</span> <span class="nl">Usage</span><span class="p">:</span> <span class="mf">7.8</span> <span class="n">MB</span><span class="p">,</span> <span class="n">less</span> <span class="n">than</span> <span class="mf">42.86</span><span class="o">%</span> <span class="n">of</span> <span class="n">C</span> <span class="n">online</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">Container</span> <span class="n">With</span> <span class="n">Most</span> <span class="n">Water</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String to Integer (Atoi)]]></title>
    <link href="http://crazyzfk.github.io/blog/2020/01/01/string-to-integer-atoi/"/>
    <updated>2020-01-01T17:31:34+08:00</updated>
    <id>http://crazyzfk.github.io/blog/2020/01/01/string-to-integer-atoi</id>
    <content type="html"><![CDATA[<h2>问题描述</h2>

<p>实现atoi函数将string类型转换为int。</p>

<p>注意</p>

<ol>
<li>只有' &lsquo;被认为是空字符</li>
<li>只处理32位整数范围 [-2<sup>31</sup>,2<sup>31</sup>-1],超过这个范围的整数则返回对应的最大值和最小值。</li>
</ol>


<p>举例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Input</span><span class="p">:</span> <span class="s">&quot;42&quot;</span>
</span><span class='line'><span class="nl">Output</span><span class="p">:</span> <span class="mi">42</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Input</span><span class="p">:</span> <span class="s">&quot;   -42&quot;</span>
</span><span class='line'><span class="nl">Output</span><span class="p">:</span> <span class="o">-</span><span class="mi">42</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Input</span><span class="p">:</span> <span class="s">&quot;4193 with words&quot;</span>
</span><span class='line'><span class="nl">Output</span><span class="p">:</span> <span class="mi">4193</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Input</span><span class="p">:</span> <span class="s">&quot;words and 987&quot;</span>
</span><span class='line'><span class="nl">Output</span><span class="p">:</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Input</span><span class="p">:</span> <span class="s">&quot;-91283472332&quot;</span>
</span><span class='line'><span class="nl">Output</span><span class="p">:</span> <span class="o">-</span><span class="mi">2147483648</span>
</span></code></pre></td></tr></table></div></figure>


<h2>问题分析</h2>

<p>首先考虑特殊情况</p>

<ol>
<li>全是空格的字符串</li>
<li>第一个非空的字符串不是数字也不是+/-符号的字符串</li>
</ol>


<p>将上面两种情况首先排除，上面的情况可以直接返回0。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">index</span><span class="o">&lt;</span><span class="n">size</span><span class="p">;</span><span class="n">index</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39; &#39;</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">beg</span><span class="o">==-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">&gt;=</span><span class="sc">&#39;0&#39;</span><span class="o">&amp;&amp;</span><span class="n">str</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">&lt;=</span><span class="sc">&#39;9&#39;</span><span class="o">&amp;&amp;</span><span class="n">beg</span><span class="o">==-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>        <span class="n">beg</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>        <span class="n">end</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">((</span><span class="n">str</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;+&#39;</span><span class="o">||</span><span class="n">str</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;-&#39;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="n">beg</span><span class="o">==-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>        <span class="n">beg</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>        <span class="n">end</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">&lt;</span><span class="sc">&#39;0&#39;</span><span class="o">||</span><span class="n">str</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">&gt;</span><span class="sc">&#39;9&#39;</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">beg</span><span class="o">==-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="n">end</span> <span class="o">=</span> <span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">end</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">beg</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">||</span><span class="p">(</span><span class="n">beg</span><span class="o">==</span><span class="n">end</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">beg</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;+&#39;</span><span class="o">||</span><span class="n">str</span><span class="p">[</span><span class="n">beg</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;-&#39;</span><span class="p">)){</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>剩下的部分就是提取出需要的字符串,根据与最大和最小整数字符串比较来判断是否超过了范围。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span><span class="o">*</span> <span class="n">MAX_INT_WITHOUTSIGN</span> <span class="o">=</span> <span class="s">&quot;2147483647&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span><span class="o">*</span> <span class="n">MIN_INT_WITHOUTSIGN</span> <span class="o">=</span> <span class="s">&quot;2147483648&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">MAX_LENGTH</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>   <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">beg</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;-&#39;</span><span class="o">||</span><span class="n">str</span><span class="p">[</span><span class="n">beg</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;+&#39;</span><span class="p">){</span>
</span><span class='line'>        <span class="n">realBeg</span> <span class="o">=</span> <span class="n">beg</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="n">realBeg</span> <span class="o">=</span> <span class="n">beg</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">realBeg</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;0&#39;</span><span class="p">){</span>
</span><span class='line'>        <span class="n">realBeg</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">numbers</span> <span class="o">=</span> <span class="n">end</span> <span class="o">-</span> <span class="n">realBeg</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">numbers</span><span class="o">&gt;</span><span class="n">MAX_LENGTH</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">beg</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;-&#39;</span><span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">2147483648</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">2147483647</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">point</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">numbers</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="n">realBeg</span><span class="p">;</span><span class="n">index</span><span class="o">&lt;=</span><span class="n">end</span><span class="p">;</span><span class="n">index</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">point</span><span class="p">[</span><span class="n">pos</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">str</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">point</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span><span class="o">=</span><span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">numbers</span><span class="o">&gt;=</span><span class="n">MAX_LENGTH</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">beg</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;-&#39;</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">point</span><span class="p">,</span><span class="n">MIN_INT_WITHOUTSIGN</span><span class="p">)</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                <span class="k">return</span> <span class="o">-</span><span class="mi">2147483648</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">point</span><span class="p">,</span> <span class="n">MAX_INT_WITHOUTSIGN</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="mi">2147483647</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>剩下的部分就比较简单了，直接按照位数乘以10项加起来就可以了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="n">numbers</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">pos</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">index</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="n">index</span><span class="o">--</span><span class="p">,</span><span class="n">pos</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="n">charToNumber</span><span class="o">=</span><span class="n">point</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">tenTimePos</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">tenTimePos</span><span class="o">&lt;</span><span class="n">pos</span><span class="p">;</span><span class="n">tenTimePos</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">charToNumber</span><span class="o">*=</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">result</span><span class="o">+=</span><span class="n">charToNumber</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">free</span><span class="p">(</span><span class="n">point</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">beg</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;-&#39;</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="o">-</span><span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span><span class="o">*</span> <span class="n">MAX_INT_WITHOUTSIGN</span> <span class="o">=</span> <span class="s">&quot;2147483647&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span><span class="o">*</span> <span class="n">MIN_INT_WITHOUTSIGN</span> <span class="o">=</span> <span class="s">&quot;2147483648&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">MAX_LENGTH</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">myAtoi</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span> <span class="n">str</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="n">realBeg</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">beg</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="n">end</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="n">index</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">numbers</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">pos</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">result</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">charToNumber</span><span class="p">,</span><span class="n">tenTimePos</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">point</span><span class="p">;</span>
</span><span class='line'>    <span class="n">size</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">size</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">index</span><span class="o">&lt;</span><span class="n">size</span><span class="p">;</span><span class="n">index</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39; &#39;</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">beg</span><span class="o">==-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">&gt;=</span><span class="sc">&#39;0&#39;</span><span class="o">&amp;&amp;</span><span class="n">str</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">&lt;=</span><span class="sc">&#39;9&#39;</span><span class="o">&amp;&amp;</span><span class="n">beg</span><span class="o">==-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>            <span class="n">beg</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>            <span class="n">end</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">((</span><span class="n">str</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;+&#39;</span><span class="o">||</span><span class="n">str</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;-&#39;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="n">beg</span><span class="o">==-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>            <span class="n">beg</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>            <span class="n">end</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">&lt;</span><span class="sc">&#39;0&#39;</span><span class="o">||</span><span class="n">str</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">&gt;</span><span class="sc">&#39;9&#39;</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">beg</span><span class="o">==-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
</span><span class='line'>                <span class="n">end</span> <span class="o">=</span> <span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">end</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">beg</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">||</span><span class="p">(</span><span class="n">beg</span><span class="o">==</span><span class="n">end</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">beg</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;+&#39;</span><span class="o">||</span><span class="n">str</span><span class="p">[</span><span class="n">beg</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;-&#39;</span><span class="p">)){</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">beg</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;-&#39;</span><span class="o">||</span><span class="n">str</span><span class="p">[</span><span class="n">beg</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;+&#39;</span><span class="p">){</span>
</span><span class='line'>        <span class="n">realBeg</span> <span class="o">=</span> <span class="n">beg</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="n">realBeg</span> <span class="o">=</span> <span class="n">beg</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">realBeg</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;0&#39;</span><span class="p">){</span>
</span><span class='line'>        <span class="n">realBeg</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">numbers</span> <span class="o">=</span> <span class="n">end</span> <span class="o">-</span> <span class="n">realBeg</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">numbers</span><span class="o">&gt;</span><span class="n">MAX_LENGTH</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">beg</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;-&#39;</span><span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">2147483648</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">2147483647</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">point</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">numbers</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="n">realBeg</span><span class="p">;</span><span class="n">index</span><span class="o">&lt;=</span><span class="n">end</span><span class="p">;</span><span class="n">index</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">point</span><span class="p">[</span><span class="n">pos</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">str</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">point</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span><span class="o">=</span><span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">numbers</span><span class="o">&gt;=</span><span class="n">MAX_LENGTH</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">beg</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;-&#39;</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">point</span><span class="p">,</span><span class="n">MIN_INT_WITHOUTSIGN</span><span class="p">)</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                <span class="k">return</span> <span class="o">-</span><span class="mi">2147483648</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">point</span><span class="p">,</span> <span class="n">MAX_INT_WITHOUTSIGN</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="mi">2147483647</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="n">numbers</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">pos</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">index</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="n">index</span><span class="o">--</span><span class="p">,</span><span class="n">pos</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">charToNumber</span><span class="o">=</span><span class="n">point</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">tenTimePos</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">tenTimePos</span><span class="o">&lt;</span><span class="n">pos</span><span class="p">;</span><span class="n">tenTimePos</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="n">charToNumber</span><span class="o">*=</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">result</span><span class="o">+=</span><span class="n">charToNumber</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">point</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">beg</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;-&#39;</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="o">-</span><span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果(有点懵，同样的代码得到不同的结果)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Runtime</span><span class="p">:</span> <span class="mi">4</span> <span class="n">ms</span><span class="p">,</span> <span class="n">faster</span> <span class="n">than</span> <span class="mf">66.31</span><span class="o">%</span> <span class="n">of</span> <span class="n">C</span> <span class="n">online</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">String</span> <span class="n">to</span> <span class="n">Integer</span> <span class="p">(</span><span class="n">atoi</span><span class="p">).</span>
</span><span class='line'><span class="n">Memory</span> <span class="nl">Usage</span><span class="p">:</span> <span class="mf">6.9</span> <span class="n">MB</span><span class="p">,</span> <span class="n">less</span> <span class="n">than</span> <span class="mf">71.43</span><span class="o">%</span> <span class="n">of</span> <span class="n">C</span> <span class="n">online</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">String</span> <span class="n">to</span> <span class="n">Integer</span> <span class="p">(</span><span class="n">atoi</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Runtime</span><span class="p">:</span> <span class="mi">0</span> <span class="n">ms</span><span class="p">,</span> <span class="n">faster</span> <span class="n">than</span> <span class="mf">100.00</span><span class="o">%</span> <span class="n">of</span> <span class="n">C</span> <span class="n">online</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">String</span> <span class="n">to</span> <span class="n">Integer</span> <span class="p">(</span><span class="n">atoi</span><span class="p">).</span>
</span><span class='line'><span class="n">Memory</span> <span class="nl">Usage</span><span class="p">:</span> <span class="mf">7.1</span> <span class="n">MB</span><span class="p">,</span> <span class="n">less</span> <span class="n">than</span> <span class="mf">14.29</span><span class="o">%</span> <span class="n">of</span> <span class="n">C</span> <span class="n">online</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">String</span> <span class="n">to</span> <span class="n">Integer</span> <span class="p">(</span><span class="n">atoi</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZigZag Conversion]]></title>
    <link href="http://crazyzfk.github.io/blog/2019/12/21/zigzag-conversion/"/>
    <updated>2019-12-21T12:08:10+08:00</updated>
    <id>http://crazyzfk.github.io/blog/2019/12/21/zigzag-conversion</id>
    <content type="html"><![CDATA[<h2>问题描述</h2>

<p>在给定行数的情况下字符串 &ldquo;PAYPALISHIRING&rdquo; 可以被写成如下的之字型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">P</span>   <span class="n">A</span>   <span class="n">H</span>   <span class="n">N</span>
</span><span class='line'><span class="n">A</span> <span class="n">P</span> <span class="n">L</span> <span class="n">S</span> <span class="n">I</span> <span class="n">I</span> <span class="n">G</span>
</span><span class='line'><span class="n">Y</span>   <span class="n">I</span>   <span class="n">R</span>
</span></code></pre></td></tr></table></div></figure>


<p>按照行读取的字符串为："PAHNAPLSIIGYIR"</p>

<p>写代码指定行数完成上面的转换</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">string</span> <span class="nf">convert</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numRows</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>例子1</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Input</span><span class="p">:</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;PAYPALISHIRING&quot;</span><span class="p">,</span> <span class="n">numRows</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="nl">Output</span><span class="p">:</span> <span class="s">&quot;PAHNAPLSIIGYIR&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>例子2</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Input</span><span class="p">:</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;PAYPALISHIRING&quot;</span><span class="p">,</span> <span class="n">numRows</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="nl">Output</span><span class="p">:</span> <span class="s">&quot;PINALSIGYAHRPI&quot;</span>
</span><span class='line'><span class="nl">Explanation</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="n">P</span>     <span class="n">I</span>    <span class="n">N</span>
</span><span class='line'><span class="n">A</span>   <span class="n">L</span> <span class="n">S</span>  <span class="n">I</span> <span class="n">G</span>
</span><span class='line'><span class="n">Y</span> <span class="n">A</span>   <span class="n">H</span> <span class="n">R</span>
</span><span class='line'><span class="n">P</span>     <span class="n">I</span>
</span></code></pre></td></tr></table></div></figure>


<h2>问题分析</h2>

<p>我们按列来分析下，没一列的长度都是指定的row大小(除去最后一列)。这表示从这个列的开始到下个列的开始也是相隔了 2row-2 的长度。再从每一列单独来看如果这列的后面还有一列则随着行数的增加排在同行的字符间隔减少2。</p>

<p>以上面例子2中的第一列为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">P</span><span class="err">的后面是</span><span class="n">I</span> <span class="err">中间间隔</span><span class="mi">2</span><span class="n">row</span><span class="o">-</span><span class="mi">2</span><span class="o">=</span><span class="mi">6</span><span class="err">，</span><span class="n">A</span><span class="err">的后面是</span><span class="n">L</span><span class="err">间隔</span><span class="mi">4</span><span class="err">，</span><span class="n">Y</span><span class="err">的后面是</span><span class="n">A</span><span class="err">间隔</span><span class="mi">2</span><span class="err">，</span><span class="n">P</span><span class="err">的后面间隔</span><span class="mi">0</span><span class="err">代表没有。</span>
</span></code></pre></td></tr></table></div></figure>


<h3>代码实现</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="nf">convert</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numRows</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sLen</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">index</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">pos</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">nextPos</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">nextCol</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">colSkip</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">numRows</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sLen</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">sLen</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">colSkip</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">index</span><span class="o">&lt;</span><span class="n">numRows</span><span class="p">;</span><span class="n">index</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">col</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">nextPos</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">nextCol</span><span class="o">=</span><span class="n">index</span><span class="p">;</span><span class="n">nextPos</span><span class="o">&lt;</span><span class="n">sLen</span><span class="p">;</span><span class="n">nextCol</span><span class="o">=</span><span class="n">colSkip</span><span class="o">*</span><span class="p">(</span><span class="o">++</span><span class="n">col</span><span class="p">)</span><span class="o">+</span><span class="n">index</span><span class="p">){</span>
</span><span class='line'>            <span class="n">nextPos</span> <span class="o">=</span> <span class="n">nextCol</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">index</span><span class="o">+</span><span class="n">colSkip</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">nextCol</span><span class="o">&lt;</span><span class="n">sLen</span><span class="p">){</span>
</span><span class='line'>                <span class="n">result</span><span class="p">[</span><span class="n">pos</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">nextCol</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">nextPos</span><span class="o">&gt;</span><span class="n">nextCol</span><span class="o">&amp;&amp;</span><span class="n">nextPos</span><span class="o">&lt;</span><span class="n">nextCol</span><span class="o">+</span><span class="n">colSkip</span><span class="o">&amp;&amp;</span><span class="n">nextPos</span><span class="o">&lt;</span><span class="n">sLen</span><span class="p">){</span>
</span><span class='line'>                <span class="n">result</span><span class="p">[</span><span class="n">pos</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">nextPos</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">result</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span><span class="o">=</span><span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>运行结果</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Runtime</span><span class="p">:</span> <span class="mi">4</span> <span class="n">ms</span><span class="p">,</span> <span class="n">faster</span> <span class="n">than</span> <span class="mf">88.04</span><span class="o">%</span> <span class="n">of</span> <span class="n">C</span> <span class="n">online</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">ZigZag</span> <span class="n">Conversion</span><span class="p">.</span>
</span><span class='line'><span class="n">Memory</span> <span class="nl">Usage</span><span class="p">:</span> <span class="mf">7.8</span> <span class="n">MB</span><span class="p">,</span> <span class="n">less</span> <span class="n">than</span> <span class="mf">100.00</span><span class="o">%</span> <span class="n">of</span> <span class="n">C</span> <span class="n">online</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">ZigZag</span> <span class="n">Conversion</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<h3>其他思路</h3>

<p>一行用一个字符数组表示，字符数组写入数据的顺序由是否第一行和最后一行来控制。<strong>具体代码见leetcode关于本题的讨论</strong></p>

<h2>后记</h2>

<h3>corner case</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="s">&quot;A&quot;</span> <span class="mi">1</span>
</span><span class='line'><span class="s">&quot;ABC&quot;</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Longest Palindromic Substring]]></title>
    <link href="http://crazyzfk.github.io/blog/2019/12/15/longest-palindromic-substring/"/>
    <updated>2019-12-15T12:50:37+08:00</updated>
    <id>http://crazyzfk.github.io/blog/2019/12/15/longest-palindromic-substring</id>
    <content type="html"><![CDATA[<h2>问题描述</h2>

<p>找出字符串s中最长的回文子串，假设s最长为1000.</p>

<p>例子1：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Input</span><span class="p">:</span> <span class="s">&quot;babad&quot;</span>
</span><span class='line'><span class="nl">Output</span><span class="p">:</span> <span class="s">&quot;bab&quot;</span>
</span><span class='line'><span class="nl">Note</span><span class="p">:</span> <span class="s">&quot;aba&quot;</span> <span class="n">is</span> <span class="n">also</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">answer</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>例子2:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Input</span><span class="p">:</span> <span class="s">&quot;cbbd&quot;</span>
</span><span class='line'><span class="nl">Output</span><span class="p">:</span> <span class="s">&quot;bb&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>问题分析</h2>

<ol>
<li>首先需要找到字符串中的所有回文子串。</li>
<li>选择上一步中所有回文子串中最长的。</li>
</ol>


<h3>查找回文子串</h3>

<p>回文字符串的最大特点是整个字符串是对称的结构，可以使用两个指针来分别代表子串的开始和结束。然后在确定子串是否是对称的，由此来判断字符串是否是回文的。</p>

<p>下面的代码是打印所有的回文子串并返回最长子串的长度：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">findPalindromicString</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">sp</span><span class="o">=</span><span class="n">s</span><span class="p">,</span><span class="o">*</span><span class="n">ep</span><span class="o">=</span><span class="n">s</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">tmpSp</span><span class="p">,</span><span class="o">*</span><span class="n">tmpEp</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">isPalindromic</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">tmpResult</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">*</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">ep</span><span class="p">){</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="n">tmpSp</span><span class="o">=</span><span class="n">sp</span><span class="p">,</span><span class="n">tmpEp</span><span class="o">=</span><span class="n">ep</span><span class="p">;</span><span class="n">tmpSp</span><span class="o">&lt;</span><span class="n">tmpEp</span><span class="p">;</span><span class="n">tmpSp</span><span class="o">++</span><span class="p">,</span><span class="n">tmpEp</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">tmpSp</span> <span class="o">!=</span> <span class="o">*</span><span class="n">tmpEp</span><span class="p">){</span>
</span><span class='line'>                    <span class="n">isPalindromic</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">isPalindromic</span><span class="p">){</span>
</span><span class='line'>                <span class="k">for</span><span class="p">(</span><span class="n">tmpSp</span> <span class="o">=</span> <span class="n">sp</span><span class="p">;</span><span class="n">tmpSp</span><span class="o">&lt;=</span><span class="n">ep</span><span class="p">;</span><span class="n">tmpSp</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>                    <span class="n">tmpResult</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span><span class="o">*</span><span class="n">tmpSp</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">tmpResult</span> <span class="o">&gt;</span> <span class="n">result</span><span class="p">){</span>
</span><span class='line'>                    <span class="n">result</span> <span class="o">=</span> <span class="n">tmpResult</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">isPalindromic</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>            <span class="n">ep</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">sp</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ep</span> <span class="o">=</span> <span class="n">sp</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">isPalindromic</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>        <span class="n">tmpResult</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>查找最长回文子串</h3>

<p>有了上面的例子返回最长子串就比较简单了，只要有个char *保存最长的子串然后返回就可以了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span><span class="o">*</span> <span class="nf">findPalindromicString</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">sp</span><span class="o">=</span><span class="n">s</span><span class="p">,</span><span class="o">*</span><span class="n">ep</span><span class="o">=</span><span class="n">s</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">tmpSp</span><span class="p">,</span><span class="o">*</span><span class="n">tmpEp</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">startPoint</span><span class="o">=</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">isPalindromic</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">tmpLength</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="o">*</span><span class="n">sp</span><span class="p">)){</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">*</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">ep</span><span class="p">){</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="n">tmpSp</span><span class="o">=</span><span class="n">sp</span><span class="p">,</span><span class="n">tmpEp</span><span class="o">=</span><span class="n">ep</span><span class="p">;</span><span class="n">tmpSp</span><span class="o">&lt;</span><span class="n">tmpEp</span><span class="p">;</span><span class="n">tmpSp</span><span class="o">++</span><span class="p">,</span><span class="n">tmpEp</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">tmpSp</span> <span class="o">!=</span> <span class="o">*</span><span class="n">tmpEp</span><span class="p">){</span>
</span><span class='line'>                    <span class="n">isPalindromic</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">isPalindromic</span><span class="p">){</span>
</span><span class='line'>                <span class="n">tmpLength</span> <span class="o">=</span> <span class="n">ep</span> <span class="o">-</span> <span class="n">sp</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">tmpLength</span> <span class="o">&gt;</span> <span class="n">max</span><span class="p">){</span>
</span><span class='line'>                    <span class="n">max</span> <span class="o">=</span> <span class="n">tmpLength</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">startPoint</span> <span class="o">=</span> <span class="n">sp</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">isPalindromic</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>            <span class="n">ep</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">sp</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ep</span> <span class="o">=</span> <span class="n">sp</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">isPalindromic</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>        <span class="n">tmpLength</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">max</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">index</span><span class="o">&lt;</span><span class="n">max</span><span class="p">;</span><span class="n">index</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">result</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">=*</span><span class="p">(</span><span class="n">startPoint</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">result</span><span class="p">[</span><span class="n">max</span><span class="p">]</span><span class="o">=</span><span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>运行结果</h2>

<p>下面为在leetcode的运行结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Runtime</span><span class="p">:</span> <span class="mi">1644</span> <span class="n">ms</span><span class="p">,</span> <span class="n">faster</span> <span class="n">than</span> <span class="mf">5.05</span><span class="o">%</span> <span class="n">of</span> <span class="n">C</span> <span class="n">online</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">Longest</span> <span class="n">Palindromic</span> <span class="n">Substring</span><span class="p">.</span>
</span><span class='line'><span class="n">Memory</span> <span class="nl">Usage</span><span class="p">:</span> <span class="mf">7.3</span> <span class="n">MB</span><span class="p">,</span> <span class="n">less</span> <span class="n">than</span> <span class="mf">18.18</span><span class="o">%</span> <span class="n">of</span> <span class="n">C</span> <span class="n">online</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">Longest</span> <span class="n">Palindromic</span> <span class="n">Substring</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>效果很差</strong></p>

<h2>代码优化</h2>

<h3>时间复杂度优化</h3>

<p>从上面的代码中可以看到查找回文字符串的时间复杂度至少为O(n<sup>2</sup>),这个时间主要花在了字符串的遍历上面。一共有这么多的遍历：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">n</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="p">...</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了找到所有可能的回文子串，遍历了所有的子串，通过检查子串来确定是否是回文的。</p>

<p>思考：是否可以不检查所有的字符串就能找到回文字符串？</p>

<p>回文字符串是对称的，对称的一个重要特点是从中间开始两边的字符串相等。如果按照这个思路来解决的话我们就可以很快的判断一个子串是不是回文的，而且不用检查所有的字符串。</p>

<p>举个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">查找</span><span class="n">abcbd</span><span class="err">字符串的最长回文</span>
</span></code></pre></td></tr></table></div></figure>


<p>按照以前的思路我们需要检查的子串如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">ab</span>
</span><span class='line'><span class="n">abc</span>
</span><span class='line'><span class="n">abcb</span>
</span><span class='line'><span class="n">abcbd</span>
</span><span class='line'><span class="n">bc</span>
</span><span class='line'><span class="n">bcb</span> <span class="c1">//回文子串</span>
</span><span class='line'><span class="n">bcbd</span>
</span><span class='line'><span class="n">cb</span>
</span><span class='line'><span class="n">cbd</span>
</span><span class='line'><span class="n">bd</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果按照新的思路来考虑需要检查下面的子串：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">abc</span>
</span><span class='line'><span class="n">bcb</span><span class="c1">//回文子串</span>
</span><span class='line'><span class="n">cbd</span>
</span></code></pre></td></tr></table></div></figure>


<p>从两个思路需要检查的子串数量可以看出优化后方法的时间复杂度会下降很多。</p>

<p>新思路代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="nf">findPalindromicStringOpti1</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">sp</span> <span class="o">=</span> <span class="n">s</span><span class="p">,</span><span class="o">*</span><span class="n">lower</span><span class="p">,</span><span class="o">*</span><span class="n">upper</span><span class="p">,</span><span class="o">*</span><span class="n">startPoint</span><span class="o">=</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">maxLength</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">tmpLength</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">index</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">odd</span><span class="o">=</span><span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="o">*</span><span class="n">s</span><span class="p">)</span><span class="o">||!</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">s</span><span class="o">+</span><span class="mi">1</span><span class="p">))){</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!*</span><span class="p">(</span><span class="n">sp</span><span class="o">+</span><span class="mi">2</span><span class="p">)){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span><span class="o">==*</span><span class="p">(</span><span class="n">sp</span><span class="o">+</span><span class="mi">1</span><span class="p">)){</span>
</span><span class='line'>            <span class="n">maxLength</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>            <span class="n">startPoint</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">sp</span><span class="o">=</span><span class="n">sp</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="o">*</span><span class="p">(</span><span class="n">sp</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span><span class="n">sp</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="n">lower</span> <span class="o">=</span> <span class="n">sp</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="n">upper</span> <span class="o">=</span> <span class="n">sp</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(;</span><span class="n">lower</span><span class="o">&gt;=</span><span class="n">s</span><span class="o">&amp;&amp;*</span><span class="n">upper</span><span class="o">&amp;&amp;*</span><span class="n">lower</span><span class="o">==*</span><span class="n">upper</span><span class="p">;</span><span class="n">lower</span><span class="o">--</span><span class="p">,</span><span class="n">upper</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>            <span class="n">tmpLength</span> <span class="o">=</span> <span class="n">upper</span> <span class="o">-</span> <span class="n">lower</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">tmpLength</span> <span class="o">&gt;</span> <span class="n">maxLength</span><span class="p">){</span>
</span><span class='line'>                <span class="n">maxLength</span> <span class="o">=</span> <span class="n">tmpLength</span><span class="p">;</span>
</span><span class='line'>                <span class="n">startPoint</span> <span class="o">=</span> <span class="o">++</span><span class="n">lower</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">lower</span> <span class="o">=</span> <span class="n">sp</span><span class="p">;</span>
</span><span class='line'>            <span class="n">upper</span> <span class="o">=</span> <span class="n">sp</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">sp</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">==*</span><span class="n">sp</span><span class="p">){</span>
</span><span class='line'>                <span class="n">lower</span> <span class="o">=</span> <span class="n">sp</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="n">upper</span> <span class="o">=</span><span class="n">sp</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">sp</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">==*</span><span class="n">sp</span><span class="p">){</span>
</span><span class='line'>                <span class="n">upper</span> <span class="o">=</span> <span class="n">sp</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="n">lower</span> <span class="o">=</span> <span class="n">sp</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(;</span><span class="n">lower</span><span class="o">&gt;=</span><span class="n">s</span><span class="o">&amp;&amp;*</span><span class="n">upper</span><span class="o">&amp;&amp;*</span><span class="n">lower</span><span class="o">==*</span><span class="n">upper</span><span class="p">;</span><span class="n">lower</span><span class="o">--</span><span class="p">,</span><span class="n">upper</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>            <span class="n">tmpLength</span> <span class="o">=</span> <span class="n">upper</span> <span class="o">-</span> <span class="n">lower</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">tmpLength</span> <span class="o">&gt;</span> <span class="n">maxLength</span><span class="p">){</span>
</span><span class='line'>                <span class="n">maxLength</span> <span class="o">=</span> <span class="n">tmpLength</span><span class="p">;</span>
</span><span class='line'>                <span class="n">startPoint</span> <span class="o">=</span> <span class="o">++</span><span class="n">lower</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">maxLength</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">index</span><span class="o">&lt;</span><span class="n">maxLength</span><span class="p">;</span><span class="n">index</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">result</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">=*</span><span class="p">(</span><span class="n">startPoint</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">result</span><span class="p">[</span><span class="n">maxLength</span><span class="p">]</span><span class="o">=</span><span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>优化后的运行结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Runtime</span><span class="p">:</span> <span class="mi">12</span> <span class="n">ms</span><span class="p">,</span> <span class="n">faster</span> <span class="n">than</span> <span class="mf">86.53</span><span class="o">%</span> <span class="n">of</span> <span class="n">C</span> <span class="n">online</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">Longest</span> <span class="n">Palindromic</span> <span class="n">Substring</span><span class="p">.</span>
</span><span class='line'><span class="n">Memory</span> <span class="nl">Usage</span><span class="p">:</span> <span class="mf">7.1</span> <span class="n">MB</span><span class="p">,</span> <span class="n">less</span> <span class="n">than</span> <span class="mf">90.91</span><span class="o">%</span> <span class="n">of</span> <span class="n">C</span> <span class="n">online</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">Longest</span> <span class="n">Palindromic</span> <span class="n">Substring</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>优化后无论是时间还是内存都有了很大的提升</strong></p>

<p>有上可以看出来时间和空间复杂度在换个思路解题后都有了很大的提升。时间和空间的矛盾只有在其中一方已经优化到很好的时候才会体现。</p>

<h3>空间复杂度优化</h3>

<p>同上</p>

<h3>别人的思路</h3>

<h4>动态规划</h4>

<p>字符串的长度为N</p>

<p>i，j均小于N</p>

<p>P(i,j)为下标从i到j的子串</p>

<p>如果P(i,j)为回文子串，则P(i+1,j-1)也是回文的。</p>

<p>反向可以得出如果一个子串是回文的那么它的子串也一定是回文的，即：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">P</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="n">P</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="n">S</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">S</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>实现代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="nf">findPalindromicStringOptiDp</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sLength</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">**</span><span class="n">store</span><span class="p">,</span><span class="n">index</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">maxLength</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">startPoint</span><span class="o">=</span><span class="n">s</span><span class="p">,</span><span class="o">*</span><span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="o">*</span><span class="n">s</span><span class="p">)</span><span class="o">||!</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">s</span><span class="o">+</span><span class="mi">1</span><span class="p">))){</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">store</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">**</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">sLength</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">index</span><span class="o">&lt;</span><span class="n">sLength</span><span class="p">;</span><span class="n">index</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">store</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="n">sLength</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">sLength</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="n">store</span><span class="p">[</span><span class="n">index</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">sLength</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">i</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="n">j</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">){</span>
</span><span class='line'>                <span class="n">store</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">==</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                <span class="n">store</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span><span class="o">=</span> <span class="p">(</span><span class="n">store</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">==</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">store</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">&gt;</span><span class="n">maxLength</span><span class="p">){</span>
</span><span class='line'>                <span class="n">startPoint</span> <span class="o">=</span> <span class="n">s</span><span class="o">+</span><span class="n">j</span><span class="p">;</span>
</span><span class='line'>                <span class="n">maxLength</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">maxLength</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">index</span><span class="o">&lt;</span><span class="n">maxLength</span><span class="p">;</span><span class="n">index</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">result</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">=*</span><span class="p">(</span><span class="n">startPoint</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">result</span><span class="p">[</span><span class="n">maxLength</span><span class="p">]</span><span class="o">=</span><span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">store</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Runtime</span><span class="p">:</span> <span class="mi">224</span> <span class="n">ms</span><span class="p">,</span> <span class="n">faster</span> <span class="n">than</span> <span class="mf">13.32</span><span class="o">%</span> <span class="n">of</span> <span class="n">C</span> <span class="n">online</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">Longest</span> <span class="n">Palindromic</span> <span class="n">Substring</span><span class="p">.</span>
</span><span class='line'><span class="n">Memory</span> <span class="nl">Usage</span><span class="p">:</span> <span class="mf">183.1</span> <span class="n">MB</span><span class="p">,</span> <span class="n">less</span> <span class="n">than</span> <span class="mf">9.09</span><span class="o">%</span> <span class="n">of</span> <span class="n">C</span> <span class="n">online</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">Longest</span> <span class="n">Palindromic</span> <span class="n">Substring</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>由运行结果可以看到，代码使用了大量的空间运行来保存所有子串是否是回文的状态(此处可以优化，比如使用位图来表示)。运行时间也要比简单粗暴检索字符串的方式短很多。</p>

<h2>后记</h2>

<h3>需要考虑的corner case</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="s">&quot;&quot;</span>
</span><span class='line'><span class="s">&quot;a&quot;</span>
</span><span class='line'><span class="s">&quot;bbb&quot;</span>
</span><span class='line'><span class="s">&quot;bb&quot;</span>
</span><span class='line'><span class="s">&quot;ccb&quot;</span>
</span><span class='line'><span class="s">&quot;ac&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Two Numbers]]></title>
    <link href="http://crazyzfk.github.io/blog/2019/04/08/add-two-numbers/"/>
    <updated>2019-04-08T22:43:39+08:00</updated>
    <id>http://crazyzfk.github.io/blog/2019/04/08/add-two-numbers</id>
    <content type="html"><![CDATA[<h3>我的代码</h3>

<h4>代码一</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">value</span><span class="p">,</span><span class="kt">int</span> <span class="o">*</span><span class="n">step</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">value</span><span class="o">&gt;=</span><span class="mi">10</span><span class="p">){</span>
</span><span class='line'>        <span class="o">*</span><span class="n">step</span><span class="o">=*</span><span class="n">value</span><span class="o">/</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>        <span class="o">*</span><span class="n">value</span><span class="o">%=</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="o">*</span><span class="n">step</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">ListNode</span><span class="o">*</span> <span class="nf">addTwoNumbers</span><span class="p">(</span><span class="k">struct</span> <span class="n">ListNode</span><span class="o">*</span> <span class="n">l1</span><span class="p">,</span> <span class="k">struct</span> <span class="n">ListNode</span><span class="o">*</span> <span class="n">l2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">step</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">tmpValue</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">ListNode</span> <span class="o">*</span><span class="n">result</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">ListNode</span> <span class="o">*</span><span class="n">current</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">ListNode</span> <span class="o">*</span><span class="n">pre</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(;</span><span class="n">l1</span><span class="o">!=</span><span class="nb">NULL</span><span class="o">&amp;&amp;</span><span class="n">l2</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">;</span><span class="n">l1</span><span class="o">=</span><span class="n">l1</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">,</span><span class="n">l2</span><span class="o">=</span><span class="n">l2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">){</span>
</span><span class='line'>        <span class="n">tmpValue</span><span class="o">=</span><span class="n">l1</span><span class="o">-&gt;</span><span class="n">val</span><span class="o">+</span><span class="n">l2</span><span class="o">-&gt;</span><span class="n">val</span><span class="o">+</span><span class="n">step</span><span class="p">;</span>
</span><span class='line'>        <span class="n">add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tmpValue</span><span class="p">,</span><span class="o">&amp;</span><span class="n">step</span><span class="p">);</span>
</span><span class='line'>        <span class="n">current</span><span class="o">=</span><span class="p">(</span><span class="k">struct</span> <span class="n">ListNode</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">ListNode</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">current</span><span class="o">-&gt;</span><span class="n">val</span><span class="o">=</span><span class="n">tmpValue</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">pre</span><span class="o">&amp;&amp;!</span><span class="n">result</span><span class="p">){</span>
</span><span class='line'>            <span class="n">result</span><span class="o">=</span><span class="n">current</span><span class="p">;</span>
</span><span class='line'>            <span class="n">pre</span><span class="o">=</span><span class="n">current</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">=</span><span class="n">current</span><span class="p">;</span>
</span><span class='line'>            <span class="n">pre</span><span class="o">=</span><span class="n">current</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">l1</span><span class="p">){</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(;</span><span class="n">l1</span><span class="p">;</span><span class="n">l1</span><span class="o">=</span><span class="n">l1</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">){</span>
</span><span class='line'>            <span class="n">current</span><span class="o">=</span><span class="p">(</span><span class="k">struct</span> <span class="n">ListNode</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">ListNode</span><span class="p">));</span>
</span><span class='line'>            <span class="n">tmpValue</span><span class="o">=</span><span class="n">l1</span><span class="o">-&gt;</span><span class="n">val</span><span class="o">+</span><span class="n">step</span><span class="p">;</span>
</span><span class='line'>            <span class="n">add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tmpValue</span><span class="p">,</span><span class="o">&amp;</span><span class="n">step</span><span class="p">);</span>
</span><span class='line'>            <span class="n">current</span><span class="o">-&gt;</span><span class="n">val</span><span class="o">=</span><span class="n">tmpValue</span><span class="p">;</span>
</span><span class='line'>            <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">=</span><span class="n">current</span><span class="p">;</span>
</span><span class='line'>            <span class="n">pre</span><span class="o">=</span><span class="n">current</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">l2</span><span class="p">){</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(;</span><span class="n">l2</span><span class="p">;</span><span class="n">l2</span><span class="o">=</span><span class="n">l2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">){</span>
</span><span class='line'>            <span class="n">current</span><span class="o">=</span><span class="p">(</span><span class="k">struct</span> <span class="n">ListNode</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">ListNode</span><span class="p">));</span>
</span><span class='line'>            <span class="n">tmpValue</span><span class="o">=</span><span class="n">l2</span><span class="o">-&gt;</span><span class="n">val</span><span class="o">+</span><span class="n">step</span><span class="p">;</span>
</span><span class='line'>            <span class="n">add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tmpValue</span><span class="p">,</span><span class="o">&amp;</span><span class="n">step</span><span class="p">);</span>
</span><span class='line'>            <span class="n">current</span><span class="o">-&gt;</span><span class="n">val</span><span class="o">=</span><span class="n">tmpValue</span><span class="p">;</span>
</span><span class='line'>            <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">=</span><span class="n">current</span><span class="p">;</span>
</span><span class='line'>            <span class="n">pre</span><span class="o">=</span><span class="n">current</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">step</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="n">current</span><span class="o">=</span><span class="p">(</span><span class="k">struct</span> <span class="n">ListNode</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">ListNode</span><span class="p">));</span>
</span><span class='line'>        <span class="n">current</span><span class="o">-&gt;</span><span class="n">val</span><span class="o">=</span><span class="n">step</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">=</span><span class="n">current</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pre</span><span class="o">=</span><span class="n">current</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>运行结果</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Runtime</span><span class="p">:</span> <span class="mi">32</span> <span class="n">ms</span>
</span><span class='line'><span class="n">Memory</span> <span class="nl">Usage</span><span class="p">:</span> <span class="mf">17.9</span> <span class="n">MB</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Longest Substring Without Repeating Characters]]></title>
    <link href="http://crazyzfk.github.io/blog/2019/04/03/Longest-Substring-Without-Repeating-Characters/"/>
    <updated>2019-04-03T20:00:00+08:00</updated>
    <id>http://crazyzfk.github.io/blog/2019/04/03/Longest-Substring-Without-Repeating-Characters</id>
    <content type="html"><![CDATA[<h3>我的代码</h3>

<h4>代码一</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">lengthOfLongestSubstring</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">sp</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">array</span><span class="p">[</span><span class="mi">128</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">len</span><span class="p">,</span><span class="n">max</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sp</span><span class="o">=</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="n">len</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">max</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">sp</span><span class="p">){</span>
</span><span class='line'>        <span class="n">i</span><span class="o">=*</span><span class="n">sp</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>            <span class="n">len</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">len</span><span class="p">;</span>
</span><span class='line'>            <span class="n">sp</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="n">sp</span><span class="o">-=</span><span class="n">len</span><span class="o">-</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">len</span><span class="o">&gt;</span><span class="n">max</span><span class="p">){</span>
</span><span class='line'>                <span class="n">max</span><span class="o">=</span><span class="n">len</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">len</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="mi">128</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>                <span class="n">array</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">len</span><span class="o">&gt;</span><span class="n">max</span><span class="p">){</span>
</span><span class='line'>        <span class="n">max</span><span class="o">=</span><span class="n">len</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">max</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>运行结果</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Runtime</span><span class="p">:</span> <span class="mi">28</span> <span class="n">ms</span><span class="p">,</span> <span class="n">faster</span> <span class="n">than</span> <span class="mf">38.82</span><span class="o">%</span> <span class="n">of</span> <span class="n">C</span> <span class="n">online</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">Longest</span> <span class="n">Substring</span> <span class="n">Without</span> <span class="n">Repeating</span> <span class="n">Characters</span><span class="p">.</span>
</span><span class='line'><span class="n">Memory</span> <span class="nl">Usage</span><span class="p">:</span> <span class="mf">7.1</span> <span class="n">MB</span><span class="p">,</span> <span class="n">less</span> <span class="n">than</span> <span class="mf">100.00</span><span class="o">%</span> <span class="n">of</span> <span class="n">C</span> <span class="n">online</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">Longest</span> <span class="n">Substring</span> <span class="n">Without</span> <span class="n">Repeating</span> <span class="n">Characters</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two Sum，three Sum]]></title>
    <link href="http://crazyzfk.github.io/blog/2019/03/09/two-sum/"/>
    <updated>2019-03-09T17:00:00+08:00</updated>
    <id>http://crazyzfk.github.io/blog/2019/03/09/two-sum</id>
    <content type="html"><![CDATA[<h3>我的代码</h3>

<h4>代码一</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="nf">twoSum</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numsSize</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">*</span><span class="n">values</span><span class="o">=</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">numsSize</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">temp</span><span class="o">=</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">numsSize</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">target</span><span class="o">-</span><span class="n">temp</span><span class="o">==</span><span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]){</span>
</span><span class='line'>                <span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>                <span class="n">values</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">j</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">values</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>测试结果</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">Wrong</span> <span class="n">Answer</span>
</span><span class='line'><span class="n">Details</span>
</span><span class='line'><span class="n">Input</span>
</span><span class='line'><span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="mi">6</span>
</span><span class='line'><span class="n">Output</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="n">Expected</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h5>分析</h5>

<p>j的初始值应当比i大才能获取的是数组中的两个。</p>

<h4>代码二</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="nf">twoSum</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numsSize</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">foundflag</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">*</span><span class="n">values</span><span class="o">=</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">numsSize</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">temp</span><span class="o">=</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">numsSize</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">target</span><span class="o">-</span><span class="n">temp</span><span class="o">==</span><span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]){</span>
</span><span class='line'>                <span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>                <span class="n">values</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">j</span><span class="p">;</span>
</span><span class='line'>                <span class="n">foundflag</span><span class="o">=</span><span class="mi">1</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">floudflag</span><span class="o">==</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">values</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>测试结果</h5>

<p>Details
Runtime: 128 ms, faster than 42.13% of C online submissions for Two Sum.
Memory Usage: 7.6 MB, less than 65.55% of C online submissions for Two Sum.</p>

<h3>总结</h3>

<p>没有把握好细节部分的处理</p>

<h3>threesum</h3>

<h4>代码一</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="kt">int</span> <span class="o">*</span> <span class="nf">sort</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">nums</span><span class="p">,</span><span class="kt">int</span> <span class="n">size</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">result</span><span class="o">=</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">size</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">));</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">result</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">size</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&gt;</span><span class="n">result</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]){</span>
</span><span class='line'>                <span class="n">tmp</span><span class="o">=</span><span class="n">result</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>                <span class="n">result</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">result</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>                <span class="n">result</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span><span class="o">**</span> <span class="nf">threeSum</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numsSize</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">returnSize</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">l</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">flag</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">search</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">equal</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">uniq</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span> <span class="n">in_result</span><span class="p">,</span><span class="o">*</span><span class="n">new_one</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">**</span><span class="n">result</span><span class="o">=</span><span class="p">(</span><span class="kt">int</span> <span class="o">**</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">numsSize</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">numsSize</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="n">k</span><span class="o">=</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">k</span><span class="o">&lt;</span><span class="n">numsSize</span><span class="p">;</span><span class="n">k</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">+</span><span class="n">nums</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                    <span class="kt">int</span> <span class="o">*</span><span class="n">value</span><span class="o">=</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>                    <span class="n">value</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>                    <span class="n">value</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>                    <span class="n">value</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="n">nums</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span><span class='line'>                    <span class="n">equal</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">uniq</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">new_one</span><span class="o">=</span><span class="n">sort</span><span class="p">(</span><span class="n">value</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">for</span><span class="p">(</span><span class="n">search</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">search</span><span class="o">&lt;</span><span class="n">flag</span><span class="p">;</span><span class="n">search</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>                      <span class="n">in_result</span><span class="o">=</span><span class="n">sort</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">search</span><span class="p">],</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>                        <span class="k">for</span><span class="p">(</span><span class="n">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">l</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="n">l</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>                          <span class="k">if</span><span class="p">(</span><span class="n">in_result</span><span class="p">[</span><span class="n">l</span><span class="p">]</span><span class="o">!=</span><span class="n">new_one</span><span class="p">[</span><span class="n">l</span><span class="p">]){</span>
</span><span class='line'>                              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                          <span class="p">}</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                      <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="o">==</span><span class="mi">3</span><span class="p">){</span>
</span><span class='line'>                          <span class="n">uniq</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                      <span class="p">}</span>
</span><span class='line'>                        <span class="n">free</span><span class="p">(</span><span class="n">in_result</span><span class="p">);</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span><span class="n">uniq</span><span class="o">==</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="n">flag</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">result</span><span class="o">=</span><span class="p">(</span><span class="kt">int</span><span class="o">**</span><span class="p">)</span><span class="n">realloc</span><span class="p">(</span><span class="n">result</span><span class="p">,</span><span class="n">flag</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">));</span>
</span><span class='line'>                    <span class="n">result</span><span class="p">[</span><span class="n">flag</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">free</span><span class="p">(</span><span class="n">new_one</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="o">*</span><span class="n">returnSize</span><span class="o">=</span><span class="n">flag</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>测试结果</h4>

<p>Time Limit Exceeded</p>

<h4>代码二</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">Node</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">sort</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span><span class="kt">int</span> <span class="n">size</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">tmp</span><span class="p">,</span><span class="n">k</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">size</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&gt;</span><span class="n">list</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]){</span>
</span><span class='line'>                <span class="n">tmp</span><span class="o">=</span><span class="n">list</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>                <span class="n">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">list</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>                <span class="n">list</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span><span class="o">**</span> <span class="nf">threeSum</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numsSize</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">returnSize</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">left</span><span class="p">,</span><span class="n">right</span><span class="p">,</span><span class="n">sum</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">**</span><span class="n">result</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">head</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">curr</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">pre</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">*</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span><span class="n">numsSize</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">numsSize</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]){</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">left</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">right</span><span class="o">=</span><span class="n">numsSize</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="n">left</span><span class="o">&lt;</span><span class="n">right</span><span class="p">){</span>
</span><span class='line'>            <span class="n">sum</span><span class="o">=</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">]</span><span class="o">+</span><span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">sum</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                <span class="p">(</span><span class="o">*</span><span class="n">returnSize</span><span class="p">)</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">head</span><span class="p">){</span>
</span><span class='line'>                    <span class="n">head</span><span class="o">=</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="p">));</span>
</span><span class='line'>                    <span class="n">curr</span><span class="o">=</span><span class="n">head</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                    <span class="n">curr</span><span class="o">=</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="p">));</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">curr</span><span class="o">-&gt;</span><span class="n">a</span><span class="o">=</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>                <span class="n">curr</span><span class="o">-&gt;</span><span class="n">b</span><span class="o">=</span><span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">];</span>
</span><span class='line'>                <span class="n">curr</span><span class="o">-&gt;</span><span class="n">c</span><span class="o">=</span><span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">];</span>
</span><span class='line'>                <span class="n">curr</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">pre</span><span class="p">){</span>
</span><span class='line'>                    <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">=</span><span class="n">curr</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">pre</span><span class="o">=</span><span class="n">curr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">while</span><span class="p">(</span><span class="n">left</span><span class="o">&lt;</span><span class="n">right</span><span class="o">&amp;&amp;</span><span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">]</span><span class="o">==</span><span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="o">+</span><span class="mi">1</span><span class="p">]){</span>
</span><span class='line'>                    <span class="n">left</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">while</span><span class="p">(</span><span class="n">left</span><span class="o">&lt;</span><span class="n">right</span><span class="o">&amp;&amp;</span><span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">]</span><span class="o">==</span><span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="o">-</span><span class="mi">1</span><span class="p">]){</span>
</span><span class='line'>                    <span class="n">right</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">left</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="n">right</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">sum</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                <span class="n">left</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                <span class="n">right</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">result</span><span class="o">=</span><span class="p">(</span><span class="kt">int</span> <span class="o">**</span><span class="p">)</span><span class="n">malloc</span><span class="p">((</span><span class="o">*</span><span class="n">returnSize</span><span class="p">)</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">));</span>
</span><span class='line'>    <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">head</span><span class="p">){</span>
</span><span class='line'>        <span class="n">value</span><span class="o">=</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>        <span class="n">value</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'>        <span class="n">value</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'>        <span class="n">value</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">c</span><span class="p">;</span>
</span><span class='line'>        <span class="n">result</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>        <span class="n">curr</span><span class="o">=</span><span class="n">head</span><span class="p">;</span>
</span><span class='line'>        <span class="n">head</span><span class="o">=</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>        <span class="n">free</span><span class="p">(</span><span class="n">curr</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>运行结果</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Runtime</span><span class="p">:</span> <span class="mi">168</span> <span class="n">ms</span>
</span><span class='line'><span class="n">Memory</span> <span class="nl">Usage</span><span class="p">:</span> <span class="mf">24.5</span> <span class="n">MB</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection-in-java]]></title>
    <link href="http://crazyzfk.github.io/blog/2018/03/19/reflection-in-java/"/>
    <updated>2018-03-19T20:40:25+08:00</updated>
    <id>http://crazyzfk.github.io/blog/2018/03/19/reflection-in-java</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>java的反射机制是java的一个重要的特性，使用反射机制可以使java具有更好的灵活性。有时候我们需要动态的获取类的信息而这些信息有可能是在编译时是获取不到的，这个使用使用反射机制就能很好的解决问题。</p>

<h2>RTTI</h2>

<p>RTTI的含义：在运行时识别一个对象的类型。</p>

<h3>class对象</h3>

<p>类时程序的一部分，每个类都有一个Class对象，每当编写并编译一个新类就会产生一个Class对象。<br/>
Class对象仅在需要的时候被加载，Class.forName()是Class的一个静态方法，该方法参数为对象的名称，返回的为Class对象的引用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Class</span> <span class="n">c</span><span class="o">=</span><span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;X&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// 当找不到对应的类时就会报错</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>无论何时，只要你想在运行时使用类型信息，就必须首先获得恰当的Class对象的引用，Class.forName()就是实现此功能的便捷途径。使用Class.forName()你不必持有一个该类型的对象，只需要知道类型的名称就可以了，当然如果你持有该类型的对象，你也可以调用对象的getClass方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">x</span><span class="o">.</span><span class="na">getClass</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>x是对象。<br/>
通过Class对象你可以发现你想要了解的所有信息：</p>

<ul>
<li>类的简单名称和权限定名称</li>
<li>类的直接基类</li>
<li>类实现的接口</li>
<li>···</li>
</ul>


<p><strong>类字面常量：</strong></p>

<p>java提供了另一种方法来生成对Class对象的引用，就是类字面常量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">X</span><span class="o">.</span><span class="na">class</span>
</span></code></pre></td></tr></table></div></figure>


<p>X是类而不是对象。<br/>
与使用Class.forName()相比，使用类字面常量有以下的优点：</p>

<ol>
<li>更加简单和安全，因为在编译时就受到检查。</li>
<li>forName()是方法调用，所以类字面常量更加高效。</li>
<li>使用类字面常量时不会自动初始化该Class对象。</li>
</ol>


<p>类字面常量不仅可以应用于普通的类，也可以应用于接口、数组以及基本数据类型。另外对于基本数据类型的包装类，还有一个标字段TYPE。TYPE字段是一个引用，指向对应的基本数据类型的额Class对象，如下所示：</p>

<table>
<thead>
<tr>
<th>boolean.class  </th>
<th>Boolean.TYPE       </th>
</tr>
</thead>
<tbody>
<tr>
<td>char.class     </td>
<td>Character.TYPE </td>
</tr>
<tr>
<td>byte.class     </td>
<td>Byte.TYPE      </td>
</tr>
<tr>
<td>short.class        </td>
<td>Short.TYPE     </td>
</tr>
<tr>
<td>int.class      </td>
<td>Integer.TYPE       </td>
</tr>
<tr>
<td>long.class     </td>
<td>Long.TYPE      </td>
</tr>
<tr>
<td>float.class        </td>
<td>Float.TYPE     </td>
</tr>
<tr>
<td>double.class       </td>
<td>Double.TYPE        </td>
</tr>
<tr>
<td>void.class     </td>
<td>Void.TYPE      </td>
</tr>
</tbody>
</table>


<p><strong>泛化的Class引用：</strong><br/>
Class引用总是指向某个Class对象，它可以制造类的实例，并包含可作用于这些实例的所有方法代码。Class引用表示的就是它所指向的对象的确切类型，而该对象就是Class类的一个对象（Class是所有类的类）。<br/>
java5 以后泛型的引入使得Class所表示的类型更加明确</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Class</span> <span class="n">intClass</span><span class="o">=</span><span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">;</span><span class="c1">//编译器会有警告  </span>
</span><span class='line'><span class="n">Class</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">genericIntClass</span><span class="o">=</span><span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span><span class='line'><span class="n">intClass</span><span class="o">=</span><span class="kt">double</span><span class="o">.</span><span class="na">class</span><span class="o">;</span><span class="c1">//可以编译通过  </span>
</span><span class='line'><span class="n">genericIntClass</span><span class="o">=</span><span class="kt">double</span><span class="o">.</span><span class="na">class</span><span class="o">;</span><span class="c1">//编译时报错</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>通过泛型可以让编译器强制执行额外的类型检查。</em></p>

<h2>反射</h2>

<p>Class类和java.lang.reflect类库一起对泛型的概念进行了支持，该类库包含了Field，Method以及Constructor（每个类都实现了Member接口）。这些类型的对象是由JVM在运行时创建的，用以表示未知类里对应的成员。<br/>
RTTI和反射之间之间真正的区别在于：<br/>
对于RTTI来说，编译器在编译时打开和检查class文件而对于反射来说，class文件在编译时是不可获取的，所以是在运行时打开和检查class文件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[For-vs-foreach-in-java]]></title>
    <link href="http://crazyzfk.github.io/blog/2018/03/19/for-vs-foreach-in-java/"/>
    <updated>2018-03-19T20:30:23+08:00</updated>
    <id>http://crazyzfk.github.io/blog/2018/03/19/for-vs-foreach-in-java</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>一直觉得在java中使用foreach会带来一定的效率的提升，今天调研才发现并没有，看来事情还是要多调研，不能直视凭直觉来断定事情。</p>

<h2>举例</h2>

<p>如下两个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">Object</span> <span class="nl">o:</span> <span class="n">objectArrayList</span><span class="o">){</span>
</span><span class='line'>    <span class="n">o</span><span class="o">.</span><span class="na">DoSomthing</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">objectArrayList</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++){</span>
</span><span class='line'>    <span class="n">objectArrayList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">DoSomthing</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>根据我查到的资料显示，其实他们两个编译后的代码时没有区别的，foreach只是比for看起来更加简洁，唯一说可能有性能差异的地方也就是for会每次计算列表的长度。<br/>
不信你自己看<a href="http://stackoverflow.com/questions/256859/is-there-a-performance-difference-between-a-for-loop-and-a-for-each-loop">这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serialization in Java]]></title>
    <link href="http://crazyzfk.github.io/blog/2017/04/16/serialization-in-java/"/>
    <updated>2017-04-16T10:45:10+08:00</updated>
    <id>http://crazyzfk.github.io/blog/2017/04/16/serialization-in-java</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>java序列化是java作为网络编程语言的一个重要特性，序列化使得java对象可以被转为字节码，用于对象的存储和传输。
一个对象能被序列化就要实现java.io.Serializable：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="o">*</span> <span class="nd">@author</span>  <span class="n">unascribed</span>
</span><span class='line'> <span class="o">*</span> <span class="nd">@see</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">ObjectOutputStream</span>
</span><span class='line'> <span class="o">*</span> <span class="nd">@see</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">ObjectInputStream</span>
</span><span class='line'> <span class="o">*</span> <span class="nd">@see</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">ObjectOutput</span>
</span><span class='line'> <span class="o">*</span> <span class="nd">@see</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">ObjectInput</span>
</span><span class='line'> <span class="o">*</span> <span class="nd">@see</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">Externalizable</span>
</span><span class='line'> <span class="o">*</span> <span class="nd">@since</span>   <span class="n">JDK1</span><span class="o">.</span><span class="mi">1</span>
</span><span class='line'> <span class="o">*/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Serializable</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该接口是一个空接口，只是用于标记如果没有实现该接口就不能序列化，其中writeObject方法会检测传入的类是否实现了java.io.Serializable接口，如果类没有实现java.io.Serializable接口序列号时会导致报错。</p>

<h2>实现java.io.Serializable</h2>

<p>假设有这样一个类没有实现java.io.Serializable：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">grade</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getGrade</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">grade</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setGrade</span><span class="o">(</span><span class="kt">int</span> <span class="n">grade</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">grade</span> <span class="o">=</span> <span class="n">grade</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对该类调用writeObject：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SerializationTest</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ByteArrayOutputStream</span> <span class="n">baos</span><span class="o">=</span><span class="k">new</span> <span class="nf">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>          <span class="n">ObjectOutputStream</span> <span class="n">oos</span><span class="o">=</span><span class="k">new</span> <span class="nf">ObjectOutputStream</span><span class="o">(</span><span class="n">baos</span><span class="o">);</span>
</span><span class='line'>          <span class="n">Student</span> <span class="n">student</span><span class="o">=</span><span class="k">new</span> <span class="nf">Student</span><span class="o">();</span>
</span><span class='line'>          <span class="n">student</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">student</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'>          <span class="n">student</span><span class="o">.</span><span class="na">setGrade</span><span class="o">(</span><span class="mi">6</span><span class="o">);</span>
</span><span class='line'>          <span class="n">oos</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="n">student</span><span class="o">);</span>
</span><span class='line'>          <span class="n">ObjectInputStream</span> <span class="n">ois</span><span class="o">=</span><span class="k">new</span> <span class="nf">ObjectInputStream</span><span class="o">(</span><span class="k">new</span> <span class="nf">ByteArrayInputStream</span><span class="o">(</span><span class="n">baos</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">()));</span>
</span><span class='line'>          <span class="n">Student</span> <span class="n">student1</span><span class="o">=(</span><span class="n">Student</span><span class="o">)</span> <span class="n">ois</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student1</span><span class="o">.</span><span class="na">getName</span><span class="o">()+</span><span class="s">&quot;,&quot;</span><span class="o">+</span><span class="n">student1</span><span class="o">.</span><span class="na">getAge</span><span class="o">()+</span><span class="s">&quot;,&quot;</span><span class="o">+</span><span class="n">student1</span><span class="o">.</span><span class="na">getGrade</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行结果如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">NotSerializableException</span><span class="o">:</span> <span class="n">serialization</span><span class="o">.</span><span class="na">Student</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">ObjectOutputStream</span><span class="o">.</span><span class="na">writeObject0</span><span class="o">(</span><span class="n">ObjectOutputStream</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1183</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">ObjectOutputStream</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="n">ObjectOutputStream</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">347</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">serialization</span><span class="o">.</span><span class="na">SerializationTest</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">SerializationTest</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">20</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>writeObject方法中会验证传入的参数是否实现了java.io.Serializable：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">writeString</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">obj</span><span class="o">,</span> <span class="n">unshared</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">cl</span><span class="o">.</span><span class="na">isArray</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">writeArray</span><span class="o">(</span><span class="n">obj</span><span class="o">,</span> <span class="n">desc</span><span class="o">,</span> <span class="n">unshared</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">obj</span> <span class="k">instanceof</span> <span class="n">Enum</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">writeEnum</span><span class="o">((</span><span class="n">Enum</span><span class="o">)</span> <span class="n">obj</span><span class="o">,</span> <span class="n">desc</span><span class="o">,</span> <span class="n">unshared</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">obj</span> <span class="k">instanceof</span> <span class="n">Serializable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">writeOrdinaryObject</span><span class="o">(</span><span class="n">obj</span><span class="o">,</span> <span class="n">desc</span><span class="o">,</span> <span class="n">unshared</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">extendedDebugInfo</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotSerializableException</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">cl</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span> <span class="o">+</span> <span class="n">debugInfoStack</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotSerializableException</span><span class="o">(</span><span class="n">cl</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>serialVersionUID</h2>

<p>序列化对象在被反序列化为类的时候会检验serialVersionUID，如果没有手动指定该值会在序列化时根据类的信息生成一个。序列化时由编译器生成的serialVersionUID会高度依赖类的细节，而且和编译器的实现有很大的关系，也就是说可能存在同样的类在不同的编译器中生成不同的serialVersionUID的情况，或者同样的类仅仅因为改变了类的细节就会导致产生的serialVersionUID不同。</p>

<h3>这种不同会有什么影响？</h3>

<p>我们先把上个例子中的student写入到文件中:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">FileOutputStream</span> <span class="n">fos</span><span class="o">=</span><span class="k">new</span> <span class="nf">FileOutputStream</span><span class="o">(</span><span class="s">&quot;student.ser&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">ObjectOutputStream</span> <span class="n">oos</span><span class="o">=</span><span class="k">new</span> <span class="nf">ObjectOutputStream</span><span class="o">(</span><span class="n">fos</span><span class="o">);</span>
</span><span class='line'><span class="n">Student</span> <span class="n">student</span><span class="o">=</span><span class="k">new</span> <span class="nf">Student</span><span class="o">();</span>
</span><span class='line'><span class="n">student</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">student</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'><span class="n">student</span><span class="o">.</span><span class="na">setGrade</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'><span class="n">oos</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="n">student</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在将student修改为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Student</span> <span class="kd">implements</span> <span class="n">Serializable</span><span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">grade</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">school</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getGrade</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">grade</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setGrade</span><span class="o">(</span><span class="kt">int</span> <span class="n">grade</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">grade</span> <span class="o">=</span> <span class="n">grade</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getSchool</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">school</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSchool</span><span class="o">(</span><span class="n">String</span> <span class="n">school</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">school</span> <span class="o">=</span> <span class="n">school</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在student类中添加了一个字段school，然后在从文件中读取：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">FileInputStream</span> <span class="n">fis</span><span class="o">=</span><span class="k">new</span> <span class="nf">FileInputStream</span><span class="o">(</span><span class="s">&quot;student.ser&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">ObjectInputStream</span> <span class="n">ois</span><span class="o">=</span><span class="k">new</span> <span class="nf">ObjectInputStream</span><span class="o">(</span><span class="n">fis</span><span class="o">);</span>
</span><span class='line'><span class="n">Student</span> <span class="n">student1</span><span class="o">=(</span><span class="n">Student</span><span class="o">)</span> <span class="n">ois</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student1</span><span class="o">.</span><span class="na">getName</span><span class="o">()+</span><span class="s">&quot;,&quot;</span><span class="o">+</span><span class="n">student1</span><span class="o">.</span><span class="na">getAge</span><span class="o">()+</span><span class="s">&quot;,&quot;</span><span class="o">+</span><span class="n">student1</span><span class="o">.</span><span class="na">getGrade</span><span class="o">());</span>
</span><span class='line'><span class="n">ois</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="n">fis</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>就会出现如下错误</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">InvalidClassException</span><span class="o">:</span> <span class="n">serialization</span><span class="o">.</span><span class="na">Student</span><span class="o">;</span> <span class="n">local</span> <span class="kd">class</span> <span class="nc">incompatible</span><span class="o">:</span> <span class="n">stream</span> <span class="n">classdesc</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1205959179532190345</span><span class="o">,</span> <span class="n">local</span> <span class="kd">class</span> <span class="nc">serialVersionUID</span> <span class="o">=</span> <span class="o">-</span><span class="mi">3693389777067287057</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">ObjectStreamClass</span><span class="o">.</span><span class="na">initNonProxy</span><span class="o">(</span><span class="n">ObjectStreamClass</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">617</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">ObjectInputStream</span><span class="o">.</span><span class="na">readNonProxyDesc</span><span class="o">(</span><span class="n">ObjectInputStream</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1622</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">ObjectInputStream</span><span class="o">.</span><span class="na">readClassDesc</span><span class="o">(</span><span class="n">ObjectInputStream</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1517</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">ObjectInputStream</span><span class="o">.</span><span class="na">readOrdinaryObject</span><span class="o">(</span><span class="n">ObjectInputStream</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1771</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">ObjectInputStream</span><span class="o">.</span><span class="na">readObject0</span><span class="o">(</span><span class="n">ObjectInputStream</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1350</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">ObjectInputStream</span><span class="o">.</span><span class="na">readObject</span><span class="o">(</span><span class="n">ObjectInputStream</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">370</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">serialization</span><span class="o">.</span><span class="na">SerializationTest</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">SerializationTest</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">27</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中错误很清晰的告诉你错误原因是本地的类和读取的类的serialVersionUID不等，这是我们指定新student类的serialVersionUID值为-1205959179532190345</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1205959179532190345L</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次从文件中读取就没有问题。<br/>
<strong>因此在序列化类时指定类的serialVersionUID值对于类是很有必要的</strong></p>

<h3>serialVersionUID的主要作用</h3>

<p>serialVersionUID主要的目的是记录类的不同版本，使得类被反序列化时序列成正确的版本。指定类的serialVersionUID也可以有效的避免不同JVM实现导致的反序列化失败。</p>

<h2>序列化字段</h2>

<p>有时我们不需要序列化全字段，只需要将类中的指定部分字段序列化。首先我们要明确的是类中的静态变量是不会序列化的，因为静态字段是属于类的，序列化是针对类的实例的。</p>

<h3>使用Externalizable</h3>

<p>java.io.Externalizable是java.io.Serializable的子接口，该接口有两个方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">writeExternal</span><span class="o">(</span><span class="n">ObjectOutput</span> <span class="n">out</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">;</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">readExternal</span><span class="o">(</span><span class="n">ObjectInput</span> <span class="n">in</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">ClassNotFoundException</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这两个方法中可以指定那些字段序列化（<a href="http://www.cnblogs.com/chenfei0801/archive/2013/04/06/3002146.html">点击了解更多</a>）。<br/>
<strong>实现这个接口需要类的存在默认的具有public访问权限的构造函数</strong></p>

<h3>transient</h3>

<p>被transient修饰的字段是不会被序列化的。例如我们将student类修改为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Student</span> <span class="kd">implements</span> <span class="n">Serializable</span><span class="o">{</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * </span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1205959179532190345L</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">grade</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">transient</span> <span class="n">String</span> <span class="n">school</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getGrade</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">grade</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setGrade</span><span class="o">(</span><span class="kt">int</span> <span class="n">grade</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">grade</span> <span class="o">=</span> <span class="n">grade</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getSchool</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">school</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSchool</span><span class="o">(</span><span class="n">String</span> <span class="n">school</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">school</span> <span class="o">=</span> <span class="n">school</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用transient修饰school，然后我们序列化后再读取：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SerializationTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">//ByteArrayOutputStream baos=new ByteArrayOutputStream();</span>
</span><span class='line'>          <span class="n">FileOutputStream</span> <span class="n">fos</span><span class="o">=</span><span class="k">new</span> <span class="nf">FileOutputStream</span><span class="o">(</span><span class="s">&quot;student.ser&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">ObjectOutputStream</span> <span class="n">oos</span><span class="o">=</span><span class="k">new</span> <span class="nf">ObjectOutputStream</span><span class="o">(</span><span class="n">fos</span><span class="o">);</span>
</span><span class='line'>          <span class="n">Student</span> <span class="n">student</span><span class="o">=</span><span class="k">new</span> <span class="nf">Student</span><span class="o">();</span>
</span><span class='line'>          <span class="n">student</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">student</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'>          <span class="n">student</span><span class="o">.</span><span class="na">setGrade</span><span class="o">(</span><span class="mi">6</span><span class="o">);</span>
</span><span class='line'>          <span class="n">oos</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="n">student</span><span class="o">);</span>
</span><span class='line'>          <span class="n">FileInputStream</span> <span class="n">fis</span><span class="o">=</span><span class="k">new</span> <span class="nf">FileInputStream</span><span class="o">(</span><span class="s">&quot;student.ser&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="c1">//ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()));</span>
</span><span class='line'>          <span class="n">ObjectInputStream</span> <span class="n">ois</span><span class="o">=</span><span class="k">new</span> <span class="nf">ObjectInputStream</span><span class="o">(</span><span class="n">fis</span><span class="o">);</span>
</span><span class='line'>          <span class="n">Student</span> <span class="n">student1</span><span class="o">=(</span><span class="n">Student</span><span class="o">)</span> <span class="n">ois</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student1</span><span class="o">.</span><span class="na">getName</span><span class="o">()+</span><span class="s">&quot;,&quot;</span><span class="o">+</span><span class="n">student1</span><span class="o">.</span><span class="na">getAge</span><span class="o">()+</span><span class="s">&quot;,&quot;</span><span class="o">+</span><span class="n">student1</span><span class="o">.</span><span class="na">getGrade</span><span class="o">()+</span><span class="s">&quot;,&quot;</span><span class="o">+</span><span class="n">student1</span><span class="o">.</span><span class="na">getSchool</span><span class="o">());</span>
</span><span class='line'>          <span class="n">ois</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>          <span class="n">fis</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>          <span class="n">oos</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>          <span class="n">fos</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行的结果如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">name</span><span class="o">,</span><span class="mi">10</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="kc">null</span>
</span></code></pre></td></tr></table></div></figure>


<p>由此可见school并没有被序列化，所以反序列化的值为null。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hashcode in Java]]></title>
    <link href="http://crazyzfk.github.io/blog/2017/04/08/hashcode-in-java/"/>
    <updated>2017-04-08T10:45:10+08:00</updated>
    <id>http://crazyzfk.github.io/blog/2017/04/08/hashcode-in-java</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>最近在知乎上看到一个关于hashcode的问答（<a href="https://www.zhihu.com/question/57356225/answer/152881868">问答地址</a>），让我了解了java对于hashcode的处理并没有我想的那么简单。以前一直以为对象hashcode计算的结果是指向对象的引用，如果是这种情况那么至少有下面两种情况不满足：</p>

<ul>
<li>现在计算机基本都是64位的了，从hashcode的源码可以看到实际hashcode函数返回的是int，int才32位。</li>
<li>jvm在GC时需要移动对象这种移动会导致对象在堆中的地址改变，如果每次GC都要重新计算对象的hashcode，那么GC的工作就不是那么存粹了出现了JVM操作用户代码的情况。</li>
</ul>


<h3>hashcode到底是什么</h3>

<p>根据<a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode(">oracle关于hashcode的文档说明</a>)，hashcode的生成有下面三个要求：</p>

<ul>
<li>在程序的一次执行过程中无论何时调用类的hashcode方法都要返回同样的int值，但是并不要求不同的程序执行过程中返回同样的值。</li>
<li>如果两个类使用equals方法比较相等，则他们的hashcode返回的int值必须要相同。</li>
<li>两个不同的类在equals方法比较是不同的，但是并不要求他们的hashcode方法一定要返回不同的int值。不同的对象的hashcode返回不同的int值能够有效的提高hash表的执行效率。</li>
</ul>


<p>从上面的要求中我们不难看出，java并没有强制要求对hashcode的实现方法，只是提供了约束条件。文档中对于hashcode的说明中有一句话提到了对象的地址：</p>

<blockquote><p>As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the JavaTM programming language.)</p></blockquote>

<p>由此可以看出java并没有强制要求使用地址作为hashcode的返回值。</p>

<h3>hashcode的默认实现</h3>

<p>你可以通过<em>System.identityHashCode(o)</em>来获取o的hashcode，identity hash code会调用hashcode方法，无论hashcode是否被重写。<br/>
hashcode方法是native的，所以hashcode的默认实现取决于使用的JVM，目前使用最多的是hotspot虚拟机，所以一下内容均在虚拟机是hotspot的前提下进行。<br/>
hotspot默认有以下几种实现方式：</p>

<ol>
<li>A randomly generated number.</li>
<li>A function of memory address of the object.</li>
<li>A hardcoded 1 (used for sensitivity testing.)</li>
<li>A sequence.</li>
<li>The memory address of the object, cast to int.</li>
<li>Thread state combined with <a href="https://en.wikipedia.org/wiki/Xorshift">xorshift</a></li>
</ol>


<p>openJDK6和openJDK7使用第一种方式。 <br/>
openJDK8使用第四种方式。<br/>
所以hashcode的实现和地址是没有关系的。<br/>
本节主要基于<a href="https://srvaroa.github.io/jvm/java/openjdk/biased-locking/2017/01/30/hashCode.html">点击这里</a></p>

<h3>后记</h3>

<p>openJDK中生成hashcode值的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">685</span>   <span class="n">mark</span> <span class="o">=</span> <span class="n">monitor</span><span class="o">-&gt;</span><span class="n">header</span><span class="o">();</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="mi">687</span>   <span class="n">hash</span> <span class="o">=</span> <span class="n">mark</span><span class="o">-&gt;</span><span class="n">hash</span><span class="o">();</span>
</span><span class='line'><span class="mi">688</span>   <span class="k">if</span> <span class="o">(</span><span class="n">hash</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="mi">689</span>     <span class="n">hash</span> <span class="o">=</span> <span class="n">get_next_hash</span><span class="o">(</span><span class="n">Self</span><span class="o">,</span> <span class="n">obj</span><span class="o">);</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="mi">701</span>   <span class="o">}</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="mi">703</span>   <span class="k">return</span> <span class="n">hash</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>由代码可以看出类的hashcode只会被计算一次，一旦计算好了就不会再有变动。</p>
]]></content>
  </entry>
  
</feed>
