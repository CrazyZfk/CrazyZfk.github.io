<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Leetcode | crazyzfk's blog]]></title>
  <link href="http://crazyzfk.github.io/blog/categories/leetcode/atom.xml" rel="self"/>
  <link href="http://crazyzfk.github.io/"/>
  <updated>2020-01-01T17:33:44+08:00</updated>
  <id>http://crazyzfk.github.io/</id>
  <author>
    <name><![CDATA[zfk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[String to Integer (Atoi)]]></title>
    <link href="http://crazyzfk.github.io/blog/2020/01/01/string-to-integer-atoi/"/>
    <updated>2020-01-01T17:31:34+08:00</updated>
    <id>http://crazyzfk.github.io/blog/2020/01/01/string-to-integer-atoi</id>
    <content type="html"><![CDATA[<h2>问题描述</h2>

<p>实现atoi函数将string类型转换为int。</p>

<p>注意</p>

<ol>
<li>只有' &lsquo;被认为是空字符</li>
<li>只处理32位整数范围 [-2<sup>31</sup>,2<sup>31</sup>-1],超过这个范围的整数则返回对应的最大值和最小值。</li>
</ol>


<p>举例</p>

<pre><code class="c">Input: "42"
Output: 42
</code></pre>

<pre><code class="c">Input: "   -42"
Output: -42
</code></pre>

<pre><code class="c">Input: "4193 with words"
Output: 4193
</code></pre>

<pre><code class="c">Input: "words and 987"
Output: 0
</code></pre>

<pre><code class="c">Input: "-91283472332"
Output: -2147483648
</code></pre>

<h2>问题分析</h2>

<p>首先考虑特殊情况</p>

<ol>
<li>全是空格的字符串</li>
<li>第一个非空的字符串不是数字也不是+/-符号的字符串</li>
</ol>


<p>将上面两种情况首先排除，上面的情况可以直接返回0。</p>

<pre><code class="c">          for(index=0;index&lt;size;index++){
        if(str[index]==' '){
            if(beg==-1) {
                continue;
            }else{
                break;
            }
        }
        if(str[index]&gt;='0'&amp;&amp;str[index]&lt;='9'&amp;&amp;beg==-1){
            beg = index;
            end = index;
            continue;
        }
        if((str[index]=='+'||str[index]=='-')&amp;&amp;beg==-1){
            beg = index;
            end = index;
            continue;
        }
        if(str[index]&lt;'0'||str[index]&gt;'9'){
            if(beg==-1){
                return 0;
            } else{
                end = index-1;
                break;
            }
        }
        end = index;
    }
    if(beg&lt;0||(beg==end)&amp;&amp;(str[beg]=='+'||str[beg]=='-')){
        return 0;
    }
</code></pre>

<p>剩下的部分就是提取出需要的字符串,根据与最大和最小整数字符串比较来判断是否超过了范围。</p>

<pre><code>char* MAX_INT_WITHOUTSIGN = "2147483647";
char* MIN_INT_WITHOUTSIGN = "2147483648";
int MAX_LENGTH = 10;
</code></pre>

<pre><code class="c">   if(str[beg]=='-'||str[beg]=='+'){
        realBeg = beg+1;
    } else{
        realBeg = beg;
    }
    while(str[realBeg]=='0'){
        realBeg++;
    }
    numbers = end - realBeg+1;
    if(numbers&gt;MAX_LENGTH){
        if(str[beg]=='-'){
            return -2147483648;
        }else{
            return 2147483647;
        }
    }
    point = (char*)malloc(sizeof(char)*(numbers+1));
    for(index=realBeg;index&lt;=end;index++){
        point[pos++]=str[index];
    }
    point[pos]='\0';
    if(numbers&gt;=MAX_LENGTH){
        if(str[beg]=='-'){
            if(strcmp(point,MIN_INT_WITHOUTSIGN)&gt;=0){
                return -2147483648;
            }
        }else {
            if (strcmp(point, MAX_INT_WITHOUTSIGN) &gt;= 0) {
                return 2147483647;
            }
        }
    }
</code></pre>

<p>剩下的部分就比较简单了，直接按照位数乘以10项加起来就可以了</p>

<pre><code class="c">    for(index=numbers-1,pos=0;index&gt;=0;index--,pos++){
        charToNumber=point[index]-'0';
        for(tenTimePos=0;tenTimePos&lt;pos;tenTimePos++){
            charToNumber*=10;
        }
        result+=charToNumber;
    }
    free(point);
    if(str[beg]=='-'){
        return 0-result;
    }
    return result;
</code></pre>

<p>完整的代码如下：</p>

<pre><code class="c">char* MAX_INT_WITHOUTSIGN = "2147483647";
char* MIN_INT_WITHOUTSIGN = "2147483648";
int MAX_LENGTH = 10;
int myAtoi(char * str){
    int size = 0,realBeg = -1,beg=-1,end=-1,index=0,numbers=0,pos=0,result=0;
    int charToNumber,tenTimePos;
    char *point;
    size = strlen(str);
    if(size==0){
        return 0;
    }
    for(index=0;index&lt;size;index++){
        if(str[index]==' '){
            if(beg==-1) {
                continue;
            }else{
                break;
            }
        }
        if(str[index]&gt;='0'&amp;&amp;str[index]&lt;='9'&amp;&amp;beg==-1){
            beg = index;
            end = index;
            continue;
        }
        if((str[index]=='+'||str[index]=='-')&amp;&amp;beg==-1){
            beg = index;
            end = index;
            continue;
        }
        if(str[index]&lt;'0'||str[index]&gt;'9'){
            if(beg==-1){
                return 0;
            } else{
                end = index-1;
                break;
            }
        }
        end = index;
    }
    if(beg&lt;0||(beg==end)&amp;&amp;(str[beg]=='+'||str[beg]=='-')){
        return 0;
    }
    if(str[beg]=='-'||str[beg]=='+'){
        realBeg = beg+1;
    } else{
        realBeg = beg;
    }
    while(str[realBeg]=='0'){
        realBeg++;
    }
    numbers = end - realBeg+1;
    if(numbers&gt;MAX_LENGTH){
        if(str[beg]=='-'){
            return -2147483648;
        }else{
            return 2147483647;
        }
    }
    point = (char*)malloc(sizeof(char)*(numbers+1));
    for(index=realBeg;index&lt;=end;index++){
        point[pos++]=str[index];
    }
    point[pos]='\0';
    if(numbers&gt;=MAX_LENGTH){
        if(str[beg]=='-'){
            if(strcmp(point,MIN_INT_WITHOUTSIGN)&gt;=0){
                return -2147483648;
            }
        }else {
            if (strcmp(point, MAX_INT_WITHOUTSIGN) &gt;= 0) {
                return 2147483647;
            }
        }
    }
    for(index=numbers-1,pos=0;index&gt;=0;index--,pos++){
        charToNumber=point[index]-'0';
        for(tenTimePos=0;tenTimePos&lt;pos;tenTimePos++){
            charToNumber*=10;
        }
        result+=charToNumber;
    }
    free(point);
    if(str[beg]=='-'){
        return 0-result;
    }
    return result;

}
</code></pre>

<p>运行结果(有点懵，同样的代码得到不同的结果)</p>

<pre><code class="c">Runtime: 4 ms, faster than 66.31% of C online submissions for String to Integer (atoi).
Memory Usage: 6.9 MB, less than 71.43% of C online submissions for String to Integer (atoi).
</code></pre>

<pre><code>Runtime: 0 ms, faster than 100.00% of C online submissions for String to Integer (atoi).
Memory Usage: 7.1 MB, less than 14.29% of C online submissions for String to Integer (atoi).
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZigZag Conversion]]></title>
    <link href="http://crazyzfk.github.io/blog/2019/12/21/zigzag-conversion/"/>
    <updated>2019-12-21T12:08:10+08:00</updated>
    <id>http://crazyzfk.github.io/blog/2019/12/21/zigzag-conversion</id>
    <content type="html"><![CDATA[<h2>问题描述</h2>

<p>在给定行数的情况下字符串 &ldquo;PAYPALISHIRING&rdquo; 可以被写成如下的之字型：</p>

<pre><code class="c">P   A   H   N
A P L S I I G
Y   I   R
</code></pre>

<p>按照行读取的字符串为："PAHNAPLSIIGYIR"</p>

<p>写代码指定行数完成上面的转换</p>

<pre><code class="c">string convert(string s, int numRows);
</code></pre>

<h3>例子1</h3>

<pre><code class="c">Input: s = "PAYPALISHIRING", numRows = 3
Output: "PAHNAPLSIIGYIR"
</code></pre>

<h3>例子2</h3>

<pre><code class="c">Input: s = "PAYPALISHIRING", numRows = 4
Output: "PINALSIGYAHRPI"
Explanation:

P     I    N
A   L S  I G
Y A   H R
P     I
</code></pre>

<h2>问题分析</h2>

<p>我们按列来分析下，没一列的长度都是指定的row大小(除去最后一列)。这表示从这个列的开始到下个列的开始也是相隔了 2row-2 的长度。再从每一列单独来看如果这列的后面还有一列则随着行数的增加排在同行的字符间隔减少2。</p>

<p>以上面例子2中的第一列为例：</p>

<pre><code>P的后面是I 中间间隔2row-2=6，A的后面是L间隔4，Y的后面是A间隔2，P的后面间隔0代表没有。
</code></pre>

<h3>代码实现</h3>

<pre><code>char * convert(char * s, int numRows){
    int sLen=0,index=0,pos=0,nextPos=0,col=0,nextCol=0,colSkip = 2*numRows-2;
    sLen = strlen(s);
    char *result = (char *)malloc(sizeof(char)*(sLen+1));
    if(!colSkip){
        return s;
    }
    for(index=0;index&lt;numRows;index++){
        col=0;
        nextPos=0;
        for(nextCol=index;nextPos&lt;sLen;nextCol=colSkip*(++col)+index){
            nextPos = nextCol-2*index+colSkip;
            if(nextCol&lt;sLen){
                result[pos++] = s[nextCol];
            }
            if(nextPos&gt;nextCol&amp;&amp;nextPos&lt;nextCol+colSkip&amp;&amp;nextPos&lt;sLen){
                result[pos++] = s[nextPos];
            }
        }
    }
    result[pos]='\0';
    return result;

}
</code></pre>

<h3>运行结果</h3>

<pre><code class="c">Runtime: 4 ms, faster than 88.04% of C online submissions for ZigZag Conversion.
Memory Usage: 7.8 MB, less than 100.00% of C online submissions for ZigZag Conversion.
</code></pre>

<h3>其他思路</h3>

<p>一行用一个字符数组表示，字符数组写入数据的顺序由是否第一行和最后一行来控制。<strong>具体代码见leetcode关于本题的讨论</strong></p>

<h2>后记</h2>

<h3>corner case</h3>

<pre><code class="c">"A" 1
"ABC" 1
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Longest Palindromic Substring]]></title>
    <link href="http://crazyzfk.github.io/blog/2019/12/15/longest-palindromic-substring/"/>
    <updated>2019-12-15T12:50:37+08:00</updated>
    <id>http://crazyzfk.github.io/blog/2019/12/15/longest-palindromic-substring</id>
    <content type="html"><![CDATA[<h2>问题描述</h2>

<p>找出字符串s中最长的回文子串，假设s最长为1000.</p>

<p>例子1：</p>

<pre><code class="c">Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.
</code></pre>

<p>例子2:</p>

<pre><code class="c">Input: "cbbd"
Output: "bb"
</code></pre>

<h2>问题分析</h2>

<ol>
<li>首先需要找到字符串中的所有回文子串。</li>
<li>选择上一步中所有回文子串中最长的。</li>
</ol>


<h3>查找回文子串</h3>

<p>回文字符串的最大特点是整个字符串是对称的结构，可以使用两个指针来分别代表子串的开始和结束。然后在确定子串是否是对称的，由此来判断字符串是否是回文的。</p>

<p>下面的代码是打印所有的回文子串并返回最长子串的长度：</p>

<pre><code class="c">int findPalindromicString(char *s){
    char *sp=s,*ep=s+1;
    char *tmpSp,*tmpEp;
    bool isPalindromic=true;
    int result =0;
    int tmpResult =0;
    while (*sp)
    {
        while(*ep){
            for(tmpSp=sp,tmpEp=ep;tmpSp&lt;tmpEp;tmpSp++,tmpEp--){
                if(*tmpSp != *tmpEp){
                    isPalindromic = false;
                    break;
                }
            }
            if(isPalindromic){
                for(tmpSp = sp;tmpSp&lt;=ep;tmpSp++){
                    tmpResult++;
                    printf("%c",*tmpSp);
                }
                printf("\n");
                if(tmpResult &gt; result){
                    result = tmpResult;
                }
            }
            isPalindromic = true;
            ep++;
        }
        sp++;
        ep = sp + 1;
        isPalindromic = true;
        tmpResult = 0;
    }
    return result;    
}
</code></pre>

<h3>查找最长回文子串</h3>

<p>有了上面的例子返回最长子串就比较简单了，只要有个char *保存最长的子串然后返回就可以了。</p>

<pre><code class="c">char* findPalindromicString(char *s){
    char *sp=s,*ep=s+1;
    char *tmpSp,*tmpEp;
    char *startPoint=s;
    bool isPalindromic=true;
    int max =1;
    int tmpLength =0;
    char *result;
    int index;
    if(!(*sp)){
        return "";
    }
    while (*sp)
    {
        while(*ep){
            for(tmpSp=sp,tmpEp=ep;tmpSp&lt;tmpEp;tmpSp++,tmpEp--){
                if(*tmpSp != *tmpEp){
                    isPalindromic = false;
                    break;
                }
            }
            if(isPalindromic){
                tmpLength = ep - sp + 1;
                if(tmpLength &gt; max){
                    max = tmpLength;
                    startPoint = sp;
                }
            }
            isPalindromic = true;
            ep++;
        }
        sp++;
        ep = sp + 1;
        isPalindromic = true;
        tmpLength = 0;
    }
    result = (char*)malloc(sizeof(char)*(max+1));
    for(index=0;index&lt;max;index++){
        result[index]=*(startPoint++); 
    }
    result[max]='\0';
    return result;    
}
</code></pre>

<h2>运行结果</h2>

<p>下面为在leetcode的运行结果</p>

<pre><code class="c">Runtime: 1644 ms, faster than 5.05% of C online submissions for Longest Palindromic Substring.
Memory Usage: 7.3 MB, less than 18.18% of C online submissions for Longest Palindromic Substring.
</code></pre>

<p><strong>效果很差</strong></p>

<h2>代码优化</h2>

<h3>时间复杂度优化</h3>

<p>从上面的代码中可以看到查找回文字符串的时间复杂度至少为O(n<sup>2</sup>),这个时间主要花在了字符串的遍历上面。一共有这么多的遍历：</p>

<pre><code class="c">n(n-1)+(n-1)(n-2)+...+2*1
</code></pre>

<p>为了找到所有可能的回文子串，遍历了所有的子串，通过检查子串来确定是否是回文的。</p>

<p>思考：是否可以不检查所有的字符串就能找到回文字符串？</p>

<p>回文字符串是对称的，对称的一个重要特点是从中间开始两边的字符串相等。如果按照这个思路来解决的话我们就可以很快的判断一个子串是不是回文的，而且不用检查所有的字符串。</p>

<p>举个例子：</p>

<pre><code class="c">查找abcbd字符串的最长回文
</code></pre>

<p>按照以前的思路我们需要检查的子串如下：</p>

<pre><code class="c">ab
abc
abcb
abcbd
bc
bcb //回文子串
bcbd
cb
cbd
bd
</code></pre>

<p>如果按照新的思路来考虑需要检查下面的子串：</p>

<pre><code class="c">abc
bcb//回文子串
cbd
</code></pre>

<p>从两个思路需要检查的子串数量可以看出优化后方法的时间复杂度会下降很多。</p>

<p>新思路代码：</p>

<pre><code class="c">char * findPalindromicStringOpti1(char *s){
    char *sp = s,*lower,*upper,*startPoint=s;
    int maxLength=1,tmpLength=1,index=0;
    char * result;
    bool odd=false;
    if(!(*s)||!(*(s+1))){
        return s;
    }
    if(!*(sp+2)){
        if(*(sp)==*(sp+1)){
            maxLength = 2;
            startPoint = s;
        }
    }else{
        for(sp=sp+1;*(sp+1);sp++){
            lower = sp - 1;
            upper = sp + 1;
            for(;lower&gt;=s&amp;&amp;*upper&amp;&amp;*lower==*upper;lower--,upper++);
            tmpLength = upper - lower - 1;
            if(tmpLength &gt; maxLength){
                maxLength = tmpLength;
                startPoint = ++lower;
            }
            lower = sp;
            upper = sp+1;
            if(*(sp-1)==*sp){
                lower = sp-1;
                upper =sp;
            }
            if(*(sp+1)==*sp){
                upper = sp+1;
                lower = sp;
            }
            for(;lower&gt;=s&amp;&amp;*upper&amp;&amp;*lower==*upper;lower--,upper++);
            tmpLength = upper - lower - 1;
            if(tmpLength &gt; maxLength){
                maxLength = tmpLength;
                startPoint = ++lower;
            }
        }
    }
    result = (char*)malloc(sizeof(char)*(maxLength+1));
    for(index=0;index&lt;maxLength;index++){
        result[index]=*(startPoint++); 
    }
    result[maxLength]='\0';
    return result; 

}
</code></pre>

<p>优化后的运行结果</p>

<pre><code class="c">Runtime: 12 ms, faster than 86.53% of C online submissions for Longest Palindromic Substring.
Memory Usage: 7.1 MB, less than 90.91% of C online submissions for Longest Palindromic Substring.
</code></pre>

<p><strong>优化后无论是时间还是内存都有了很大的提升</strong></p>

<p>有上可以看出来时间和空间复杂度在换个思路解题后都有了很大的提升。时间和空间的矛盾只有在其中一方已经优化到很好的时候才会体现。</p>

<h3>空间复杂度优化</h3>

<p>同上</p>

<h3>别人的思路</h3>

<h4>动态规划</h4>

<p>字符串的长度为N</p>

<p>i，j均小于N</p>

<p>P(i,j)为下标从i到j的子串</p>

<p>如果P(i,j)为回文子串，则P(i+1,j-1)也是回文的。</p>

<p>反向可以得出如果一个子串是回文的那么它的子串也一定是回文的，即：</p>

<pre><code class="c">P(i,j) = P(i+1,j-1)&amp;&amp;S[i]==S[j]
</code></pre>

<p>实现代码如下：</p>

<pre><code class="c">char * findPalindromicStringOptiDp(char *s){
    int sLength = strlen(s);
    int **store,index=0,maxLength=1,i=0,j=0;
    char *startPoint=s,*result;
    if(!(*s)||!(*(s+1))){
        return s;
    }
    store = (int **)malloc(sizeof(int *)*sLength);
    for(index=0;index&lt;sLength;index++){
        store[index] = (int*)malloc(sizeof(int)*sLength);
        for(i=0;i&lt;sLength;i++){
            store[index][i] = 0;
        }
    }
    for(i=0;i&lt;sLength;i++){
        for(j=0;j&lt;=i;j++){
            if(i-j&lt;2){
                store[j][i] = s[j]==s[i]?1:0;
            }else{
                store[j][i]= (store[j+1][i-1]&amp;&amp;(s[j]==s[i]))?1:0;
            }
            if(store[j][i]&amp;&amp;(i-j+1)&gt;maxLength){
                startPoint = s+j;
                maxLength = i-j+1;
            }
        }
    }
    result = (char*)malloc(sizeof(char)*(maxLength+1));
    for(index=0;index&lt;maxLength;index++){
        result[index]=*(startPoint++); 
    }
    result[maxLength]='\0';
    free(store);
    return result; 
}
</code></pre>

<p>运行结果如下：</p>

<pre><code class="c">Runtime: 224 ms, faster than 13.32% of C online submissions for Longest Palindromic Substring.
Memory Usage: 183.1 MB, less than 9.09% of C online submissions for Longest Palindromic Substring.
</code></pre>

<p>由运行结果可以看到，代码使用了大量的空间运行来保存所有子串是否是回文的状态(此处可以优化，比如使用位图来表示)。运行时间也要比简单粗暴检索字符串的方式短很多。</p>

<h2>后记</h2>

<h3>需要考虑的corner case</h3>

<pre><code class="c">""
"a"
"bbb"
"bb"
"ccb"
"ac"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Two Numbers]]></title>
    <link href="http://crazyzfk.github.io/blog/2019/04/08/add-two-numbers/"/>
    <updated>2019-04-08T22:43:39+08:00</updated>
    <id>http://crazyzfk.github.io/blog/2019/04/08/add-two-numbers</id>
    <content type="html"><![CDATA[<h3>我的代码</h3>

<h4>代码一</h4>

<pre><code class="c">void add(int *value,int *step){
    if(*value&gt;=10){
        *step=*value/10;
        *value%=10;
    }else
    {
        *step=0;
    }

}

struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    int step=0,tmpValue;
    struct ListNode *result=NULL;
    struct ListNode *current=NULL;
    struct ListNode *pre=NULL;
    for(;l1!=NULL&amp;&amp;l2!=NULL;l1=l1-&gt;next,l2=l2-&gt;next){
        tmpValue=l1-&gt;val+l2-&gt;val+step;
        add(&amp;tmpValue,&amp;step);
        current=(struct ListNode*)malloc(sizeof(struct ListNode));

        current-&gt;val=tmpValue;
        if(!pre&amp;&amp;!result){
            result=current;
            pre=current;
        }else
        {
            pre-&gt;next=current;
            pre=current;
        }
    }
    if(l1){
        for(;l1;l1=l1-&gt;next){
            current=(struct ListNode*)malloc(sizeof(struct ListNode));
            tmpValue=l1-&gt;val+step;
            add(&amp;tmpValue,&amp;step);
            current-&gt;val=tmpValue;
            pre-&gt;next=current;
            pre=current;
        }
    }
    if(l2){
        for(;l2;l2=l2-&gt;next){
            current=(struct ListNode*)malloc(sizeof(struct ListNode));
            tmpValue=l2-&gt;val+step;
            add(&amp;tmpValue,&amp;step);
            current-&gt;val=tmpValue;
            pre-&gt;next=current;
            pre=current;
        }
    }
    if(step&gt;0){
        current=(struct ListNode*)malloc(sizeof(struct ListNode));
        current-&gt;val=step;
        pre-&gt;next=current;
        pre=current;
    }
    current-&gt;next=NULL;
    return result;
}
</code></pre>

<h4>运行结果</h4>

<pre><code>Runtime: 32 ms
Memory Usage: 17.9 MB
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Longest Substring Without Repeating Characters]]></title>
    <link href="http://crazyzfk.github.io/blog/2019/04/03/Longest-Substring-Without-Repeating-Characters/"/>
    <updated>2019-04-03T20:00:00+08:00</updated>
    <id>http://crazyzfk.github.io/blog/2019/04/03/Longest-Substring-Without-Repeating-Characters</id>
    <content type="html"><![CDATA[<h3>我的代码</h3>

<h4>代码一</h4>

<pre><code class="c">int lengthOfLongestSubstring(char* s) {
    char *sp;
    int array[128]={0};
    int i,j,len,max;
    sp=s;
    len=0;
    max=0;
    while(*sp){
        i=*sp;
        if(array[i]==0){
            len++;
            array[i]=len;
            sp++;
        }else{
            sp-=len-array[i];
            if(len&gt;max){
                max=len;
            }
            len=0;
            for(j=0;j&lt;128;j++){
                array[j]=0;
            }
        } 
    }
    if(len&gt;max){
        max=len;
    }
    return max;

}
</code></pre>

<h3>运行结果</h3>

<pre><code>Runtime: 28 ms, faster than 38.82% of C online submissions for Longest Substring Without Repeating Characters.
Memory Usage: 7.1 MB, less than 100.00% of C online submissions for Longest Substring Without Repeating Characters
</code></pre>
]]></content>
  </entry>
  
</feed>
